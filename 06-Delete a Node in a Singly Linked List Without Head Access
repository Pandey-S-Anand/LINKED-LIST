/*
 * Why is the node not the last node?
 * 
 * The given node is guaranteed not to be the last node because the deletion strategy 
 * involves copying the value of the next node into the current node. The final step is 
 * detaching the last node by setting the next pointer of the second-to-last node to null, 
 * effectively removing the last node from the list.
 * 
 * Why are all values distinct?
 * 
 * If the node values were not distinct, there would be ambiguity in identifying which node 
 * has been deleted based solely on the list structure after the operation. Distinct values 
 * ensure that the modified list maintains a clear and unambiguous state after the deletion operation.
 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void deleteNode(ListNode node) {
        ListNode currentNode = node;
        ListNode prevNode = null;

        while (currentNode.next != null) {
            // Copy the value of the next node into the current node
            currentNode.val = currentNode.next.val;
            // Move prevNode and currentNode one step ahead
            prevNode = currentNode;
            currentNode = currentNode.next;
        }
        // Set the next pointer of prevNode to null, effectively removing the last node
        prevNode.next = null;
    }
}


/*
 * Consider the linked list: 1 -> 2 -> 3 -> 4 -> 5
 *
 * Suppose we want to delete the node with value 2, and we are only given a reference to that node.
 *
 * 1. We perform `node.val = node.next.val`, which copies the value of the next node (3) into the current node (2).
 *    The list now looks like: 1 -> 3 -> 3 -> 4 -> 5
 *
 * 2. Then we update `node.next = node.next.next`, which bypasses the next node (original 3) and points to node 4.
 *    The list becomes: 1 -> 3 -> 4 -> 5
 *
 * 3. The original node with value 3 is no longer referenced in the list and becomes eligible for garbage collection.
 *
 * Final result: the node with value 2 is effectively deleted by copying over the next nodeâ€™s value and skipping it.
 */

//Optimal Approach

class Solution {
    public void deleteNode(ListNode node) {
        node.val = node.next.val;
        node.next = node.next.next;
    }
}
