/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 //Bruteforce approach

class Solution {
    public ListNode sortList(ListNode head) {
        // Create a list to store node values
        List<Integer> nodeValues = new ArrayList<>();

        // Traverse the singly linked list and add each node's value to the list
        ListNode currentNode = head;
        while (currentNode != null) {
            nodeValues.add(currentNode.val); // Add the current node value to the list
            currentNode = currentNode.next; // Move to the next node
        }

        // Sort the list of node values in ascending order
        Collections.sort(nodeValues);

        // Reassign the sorted values back to the singly linked list nodes
        currentNode = head;
        for (int nodeValue : nodeValues) {
            currentNode.val = nodeValue; // Update the value of the current node
            currentNode = currentNode.next; // Move to the next node
        }

        // Return the head of the modified, sorted singly linked list
        return head;
    }
}


//Optimal approach

