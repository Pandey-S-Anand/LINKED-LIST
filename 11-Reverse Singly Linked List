//Bruteforce Approach

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode reverseList(ListNode head) {
        // If the list is empty, return null
        if (head == null) {
            return null;
        }

        // Step 1: Extract node values into an ArrayList
        List<Integer> nodeValues = convertToArrayList(head);

        // Step 2: Reverse the ArrayList in-place
        reverseArrayList(nodeValues);

        // Step 3: Write the reversed values back into the linked list
        int index = 0;
        ListNode currentNode = head;

        while (currentNode != null) {
            currentNode.val = nodeValues.get(index++);
            currentNode = currentNode.next;
        }

        return head; // Return the modified list head
    }

    private List<Integer> convertToArrayList(ListNode head) {
        List<Integer> nodeValues = new ArrayList<>();
        ListNode currentNode = head;

        while (currentNode != null) {
            nodeValues.add(currentNode.val);
            currentNode = currentNode.next;
        }

        return nodeValues;
    }

    private void reverseArrayList(List<Integer> list) {
        for (int i = 0; i < list.size() / 2; i++) {
            int temp = list.get(i);
            list.set(i, list.get(list.size() - 1 - i));
            list.set(list.size() - 1 - i, temp);
        }
    }
}



//Better Approach

class Solution {
    public ListNode reverseList(ListNode head) {
        // If the list is empty, simply return null
        if (head == null) {
            return null;
        }

        // Step 1: Push all node values onto a stack : This allows us to access them in reverse order
        Deque<Integer> stack = collectValuesInReverseOrder(head);

        // Step 2: Traverse the list again and replace each node's value with values popped from the stack
        ListNode currentNode = head;
        while (currentNode != null) {
            currentNode.val = stack.pop();
            currentNode = currentNode.next;
        }

        // Step 3: Return the modified head 
        return head;
    }

    private Deque<Integer> collectValuesInReverseOrder(ListNode head) {
        Deque<Integer> stack = new ArrayDeque<>();
        ListNode currentNode = head;

        while (currentNode != null) {
            stack.push(currentNode.val);
            currentNode = currentNode.next;
        }

        return stack; // Stack now contains values in reverse order for popping
    }
}



//Optimal Approach

/*
* The core idea is to reverse the direction of the links between nodes.
* Instead of using any additional data structures, we will:
* 
* - Maintain two pointers:
*     1. currentNode: to traverse the list.
*     2. prevNode: to reverse the links and keep track of the new list.
* 
* - For each node, we:
*     1. Save the next node (currentNode.next) to avoid losing track of the list.
*     2. Set currentNode.next to prevNode, effectively reversing the direction of the link.
*     3. Move prevNode to currentNode, and currentNode to the next node.
* 
* - Repeat this process for every node in the list until we reach the end.
* 
* - Once the loop completes, prevNode will point to the new head of the reversed list.
* 
* This approach modifies the list in-place with no additional space required.
*/

//Iterative Approach

class Solution {
    public ListNode reverseList(ListNode head) {
        // If the list is empty, just return null
        if (head == null) {
            return null;
        }

        ListNode currentNode = head; // Start with the original head
        ListNode prevNode = null; // At the beginning, there is no previous node

        // Traverse through the list and reverse links one by one
        while (currentNode != null) {
            // Save the next node before breaking the current link
            ListNode nextNode = currentNode.next;

            // Reverse the link: point current node's next to the previous node
            currentNode.next = prevNode;

            // Move prevNode and currentNode one step forward for next iteration
            prevNode = currentNode;
            currentNode = nextNode;
        }

        // After loop ends, prevNode will be the new head of the reversed list
        return prevNode;
    }
}



// Recursive Approach

class Solution {
    public ListNode reverseList(ListNode head) {
        return reverseList(head, null);
    }

    private ListNode reverseList(ListNode currentNode, ListNode prevNode) {
        if (currentNode == null) {
            return prevNode;
        }

        ListNode nextNode = currentNode.next;
        currentNode.next = prevNode;
        prevNode = currentNode;
        currentNode = nextNode;

        return reverseList(currentNode, prevNode);
    }
}
