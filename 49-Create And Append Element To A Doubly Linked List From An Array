class Solution {
    // Inner class to help build a doubly linked list
    private class DoublyLinkedList {
        private Node head; // Points to the first node in the list
        private Node tail; // Points to the last node in the list

        // Appends a new node with given data at the end of the list
        public void append(int data) {
            Node newNode = new Node(data);

            // Case 1: Empty list
            if (head == null) {
                head = tail = newNode; // First node becomes both head and tail
            } else {
                // Case 2: Non-empty list â€” append at tail
                tail.next = newNode;      // Set current tail's next to new node
                newNode.prev = tail;      // Set new node's prev to current tail
                tail = newNode;           // Move tail to the new node
            }
        }
    }


    Node constructDLL(int arr[]) {
        DoublyLinkedList doublyLinkedList = new DoublyLinkedList();

        // Insert each array element into the doubly linked list
        for (int data : arr) {
            doublyLinkedList.append(data);
        }

        // Return the head of the constructed doubly linked list
        return doublyLinkedList.head;
    }
}
