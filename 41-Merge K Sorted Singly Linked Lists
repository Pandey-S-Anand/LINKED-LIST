/**
 * Definition for singly linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


//Bruteforce approach

class Solution {
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        public void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null; // No lists to merge, return null
        }

        return mergeKLists(lists, 0);
    }

    private ListNode mergeKLists(ListNode[] lists, int index) {
        // Base case: if at last list, return it directly
        if (index == lists.length - 1) {
            return lists[index];
        }

        // Recursively merge the remaining lists to the right
        ListNode mergedRemainingLists = mergeKLists(lists, index + 1);

        // Merge current list with the merged remaining lists
        return merge(lists[index], mergedRemainingLists);
    }

    private ListNode merge(ListNode head1, ListNode head2) {
        NodePair merged = new NodePair();

        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Traverse both lists and append the smaller node each time
        while (currentNode1 != null && currentNode2 != null) {
            int val1 = currentNode1.val;
            int val2 = currentNode2.val;

            if (val1 <= val2) {
                merged.append(currentNode1);
                currentNode1 = currentNode1.next;
            } else {
                merged.append(currentNode2);
                currentNode2 = currentNode2.next;
            }
        }

        // Append any remaining nodes from list1
        if (currentNode1 != null) {
            merged.append(currentNode1);
        }

        // Append any remaining nodes from list2
        if (currentNode2 != null) {
            merged.append(currentNode2);
        }

        return merged.head;
    }
}


//Optimal appraoch 

class Solution {
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        public void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode mergeKLists(ListNode[] lists) {
        if (lists.length == 0) {
            return null; // No lists to merge, return null
        }

        return mergeKLists(lists, 0, lists.length - 1);
    }

    private ListNode mergeKLists(ListNode[] lists, int left, int right) {
        // Base case: If there is only one singly linked list, return it
        if (left == right) {
            return lists[left];
        }

        // Find the middle index
        int mid = left + (right - left) / 2;

        // Recursively merge the left and right halves
        ListNode leftPartHead = mergeKLists(lists, left, mid);
        ListNode rightPartHead = mergeKLists(lists, mid + 1, right);

        // Merge the two sorted singly linked lists and return the merged list head
        return merge(leftPartHead, rightPartHead);
    }

    private ListNode merge(ListNode head1, ListNode head2) {
        NodePair merged = new NodePair();

        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Traverse both lists and append the smaller node each time
        while (currentNode1 != null && currentNode2 != null) {
            int val1 = currentNode1.val;
            int val2 = currentNode2.val;

            if (val1 <= val2) {
                merged.append(currentNode1);
                currentNode1 = currentNode1.next;
            } else {
                merged.append(currentNode2);
                currentNode2 = currentNode2.next;
            }
        }

        // Append any remaining nodes from list1
        if (currentNode1 != null) {
            merged.append(currentNode1);
        }

        // Append any remaining nodes from list2
        if (currentNode2 != null) {
            merged.append(currentNode2);
        }

        return merged.head;
    }
}
