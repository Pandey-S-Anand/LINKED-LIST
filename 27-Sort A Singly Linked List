/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 //Bruteforce approach

class Solution {
    public ListNode sortList(ListNode head) {
        // Create a list to store node values
        List<Integer> nodeValues = new ArrayList<>();

        // Traverse the singly linked list and add each node's value to the list
        ListNode currentNode = head;
        while (currentNode != null) {
            nodeValues.add(currentNode.val); // Add the current node value to the list
            currentNode = currentNode.next; // Move to the next node
        }

        // Sort the list of node values in ascending order
        Collections.sort(nodeValues);

        // Reassign the sorted values back to the singly linked list nodes
        currentNode = head;
        for (int nodeValue : nodeValues) {
            currentNode.val = nodeValue; // Update the value of the current node
            currentNode = currentNode.next; // Move to the next node
        }

        // Return the head of the modified, sorted singly linked list
        return head;
    }
}


//Optimal approach

class Solution {
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        NodePair() {
            head = tail = null;
        }

        private void append(ListNode node) {
            if (head == null) {
                // First node in merged list
                head = tail = node;
            } else {
                // Link current tail to the new node and update tail
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode sortList(ListNode head) {
        if (head == null) {
            return null; // Empty list is already sorted
        }
        return mergeSort(head); // Call recursive merge sort helper
    }

    private ListNode mergeSort(ListNode head) {
        // Base case: if the list has only one node, it's already sorted
        if (head.next == null) {
            return head;
        }

        // Step 1: Find the middle node to split the list into two halves
        ListNode middle = findMiddleNode(head);
        ListNode secondHalfHead = middle.next;

        // Step 2: Break the link to split the list into two separate lists
        middle.next = null;

        // Step 3: Recursively sort the left half and right half
        ListNode leftHalfHead = mergeSort(head);
        ListNode rightHalfHead = mergeSort(secondHalfHead);

        // Step 4: Merge the two sorted halves and return the merged sorted list
        return merge(leftHalfHead, rightHalfHead);
    }

    private ListNode merge(ListNode head1, ListNode head2) {
        // Initialize a helper object to manage head and tail of the merged sorted list
        NodePair merged = new NodePair();

        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Iterate while both lists have nodes remaining
        while (currentNode1 != null && currentNode2 != null) {
            // Append the smaller node to the merged list
            if (currentNode1.val <= currentNode2.val) {
                merged.append(currentNode1);
                currentNode1 = currentNode1.next; // Move forward in list1
            } else {
                merged.append(currentNode2);
                currentNode2 = currentNode2.next; // Move forward in list2
            }
        }

        // Append any remaining nodes from list1 (if any)
        if (currentNode1 != null) {
            merged.append(currentNode1);
        }

        // Append any remaining nodes from list2 (if any)
        if (currentNode2 != null) {
            merged.append(currentNode2);
        }

        // Return the head of the merged sorted linked list
        return merged.head;
    }

    private ListNode findMiddleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        ListNode slowPrevious = null;

        while (fast != null && fast.next != null) {
            slowPrevious = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

        /*
          Explanation:
          - If 'fast' is NOT null, it means the list length is odd.
            In this case, 'slow' is exactly at the middle node,
            so return 'slow' to split after the middle.
        
          - If 'fast' is null, it means the list length is even.
            In this case, 'slow' is at the second middle node,
            so we return 'slowPrevious' (the first middle node) to split
            the list into two nearly equal halves.
        */
        if (fast != null) {
            return slow; // Odd length list - middle node
        }
        return slowPrevious; // Even length list - first middle node
    }
}
