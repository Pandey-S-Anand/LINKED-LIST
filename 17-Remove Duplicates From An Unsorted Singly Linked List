class Solution {
    public Node removeDuplicates(Node head) {
        // If the list has only one node or is empty, return it as is
        if (head == null || head.next == null) {
            return head;
        }

        // Set to store unique values we have already seen
        Set<Integer> seenValues = new HashSet<>();

        // Initialize two pointers:
        Node currentNode = head;  // currentNode - to traverse the list
        Node prevNode = null;  // prevNode - to help reconnect the list when a duplicate is found

        // Traverse the linked list
        while (currentNode != null) {
            int nodeValue = currentNode.data;

            if (seenValues.contains(nodeValue)) {
                // Duplicate detected: skip this node : Connect previous node to currentNode's next
                prevNode.next = currentNode.next;

                // Optional: help GC by disconnecting currentNode
                currentNode.next = null;

                // Move to the next node (prevNode doesn't change here)
                currentNode = prevNode.next;
            } else {
                // First time this value is seen
                seenValues.add(nodeValue);

                // Move both pointers ahead
                prevNode = currentNode;
                currentNode = currentNode.next;
            }
        }

        // Return the head 
        return head;
    }
}
