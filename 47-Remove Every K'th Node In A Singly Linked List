class Solution {
    Node deleteK(Node head, int k) {
        // Edge case: if k is 1, we need to delete every node, so return null
        if (k == 1) {
            return null;
        }

        int position = 1; // To keep track of current node's position
        Node currentNode = head;
        Node prevNode = null;        

        // Traverse the list
        while (currentNode != null) {
            // If the current node is at position k, 2k, 3k... then delete it
            if (position % k == 0) {
                // Skip the current node by linking previous node to current's next
                prevNode.next = currentNode.next;

                // Detach current node (optional but clean)
                Node nextNode = currentNode.next;
                currentNode.next = null;

                // Move to the next node
                currentNode = nextNode;
            } else {
                // Move prevNode and currentNode one step forward
                prevNode = currentNode;
                currentNode = currentNode.next;
            }

            position++;
        }

        return head;  // Return the modified list
    }
}
