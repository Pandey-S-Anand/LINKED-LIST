/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Bruteforce approach

class Solution {
    public void reorderList(ListNode head) {
        // If the list has only one node, no reordering is required
        if (head.next == null) {
            return;
        }

        // Step 1: Collect all node values in a list
        List<Integer> nodeValues = collectValues(head);

        // Step 2: Rearrange the list values in the required reorder pattern
        List<Integer> rearrangedNodeValues = rearrange(nodeValues);

        // Step 3: Reassign the rearranged values back into the original list nodes
        assignValues(head, rearrangedNodeValues);
    }

    private List<Integer> collectValues(ListNode head) {
        List<Integer> nodeValues = new ArrayList<>();
        ListNode currentNode = head;

        while (currentNode != null) {
            nodeValues.add(currentNode.val); // Store current node value
            currentNode = currentNode.next; // Move to next node
        }

        return nodeValues;
    }

    private List<Integer> rearrange(List<Integer> arr) {
        List<Integer> rearrangedArray = new ArrayList<>();
        int start = 0, end = arr.size() - 1;

        while (start <= end) {
            rearrangedArray.add(arr.get(start)); // Add from front
            if (start != end) {
                rearrangedArray.add(arr.get(end)); // Add from end
            }
            start++;
            end--;
        }

        return rearrangedArray;
    }

    private void assignValues(ListNode head, List<Integer> values) {
        ListNode current = head;

        for (int value : values) {
            current.val = value; // Overwrite node value
            current = current.next; // Move to next node
        }
    }
}



// Optimal approach

class Solution {
    //Helper class to maintain the head and tail of the resulting list during the reordering phase.
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        public void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public void reorderList(ListNode head) {
        // Step 1: Find the middle node of the list
        ListNode middle = findMiddle(head);

        // Step 2: Reverse the second half of the list
        ListNode secondHalfHead = middle.next;
        middle.next = null; // Break the list into two parts

        ListNode reversedSecondHalf = reverse(secondHalfHead);

        // Step 3: Merge two halves alternately
        rearrange(head, reversedSecondHalf);
    }

    private ListNode findMiddle(ListNode head) {
        ListNode slowPrev = null;
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slowPrev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

        /*
         * If fast != null, the list has an odd number of nodes,
         * and 'slow' is the exact middle node.
         * If fast == null, the list has an even number of nodes,
         * and 'slowPrev' is the node just before the middle.
         */
        return fast != null ? slow : slowPrev;
    }

    private ListNode reverse(ListNode head) {
        ListNode prevNode = null;
        ListNode currentNode = head;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        return prevNode;
    }

    private void rearrange(ListNode head1, ListNode head2) {
        NodePair rearrangedList = new NodePair();
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Alternately append nodes from both halves
        while (currentNode1 != null && currentNode2 != null) {
            rearrangedList.append(currentNode1);
            currentNode1 = currentNode1.next;

            rearrangedList.append(currentNode2);
            currentNode2 = currentNode2.next;
        }

        // In case of odd-sized list, first half will have one extra node
        if (currentNode1 != null) {
            rearrangedList.append(currentNode1);
        }
    }
}
