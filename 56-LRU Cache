/*
 * LRUCache lRUCache = new LRUCache(2); // Create cache with capacity = 2
 *
 * lRUCache.put(1, 10); // Cache: {1=10}
 * // Add key 1 with value 10, it's the most recently used (MRU)
 * // Cache state: {1=10} - Key 1 is the only item, so it is both MRU and Least Recently Used (LRU)
 *
 * lRUCache.put(2, 20); // Cache: {1=10, 2=20}
 * // Add key 2 with value 20, now key 2 is the MRU and key 1 is the LRU.
 * // Cache state: {1=10, 2=20} - Key 2 is MRU, key 1 is LRU.
 *
 * lRUCache.get(1); // return 10
 * // Access key 1, making it the MRU.
 * // Cache state: {2=20, 1=10} - Key 1 is moved to MRU position, key 2 becomes LRU.
 *
 * lRUCache.put(3, 30); // Cache is full, remove LRU key 2, then add key 3
 * // Cache is full (capacity=2), so key 2 (LRU) is evicted.
 * // Add key 3 with value 30, making it the MRU.
 * // Cache state: {1=10, 3=30} - Key 1 is LRU, key 3 is MRU.
 *
 * lRUCache.get(2); // returns -1 (not found)
 * // Key 2 was evicted, so it returns -1.
 *
 * lRUCache.put(4, 40); // Cache is full, remove LRU key 1, then add key 4
 * // Cache is full again, so key 1 (LRU) is evicted.
 * // Add key 4 with value 40, making it the MRU.
 * // Cache state: {3=30, 4=40} - Key 3 is LRU, key 4 is MRU.
 *
 * lRUCache.get(1); // return -1 (not found)
 * // Key 1 was evicted, so it returns -1.
 *
 * lRUCache.get(3); // return 30
 * // Access key 3, making it the MRU.
 * // Cache state: {4=40, 3=30} - Key 3 is now MRU, key 4 is LRU.
 *
 * lRUCache.get(4); // return 40
 * // Access key 4, making it the MRU.
 * // Cache state: {3=30, 4=40} - Key 4 is now MRU, key 3 is LRU.
 */


class LRUCache {
    // Doubly linked list node representing each key-value pair
    private static class Node {
        private Pair pair;
        private Node previous, next;

        public Node(int key, int value) {
            this.pair = new Pair(key, value);
            previous = next = null;
        }

        private static class Pair {
            private int key;
            private int value;

            public Pair(int key, int value) {
                this.key = key;
                this.value = value;
            }
        }
    }

    private final int capacity;
    private final Map<Integer, Node> cache; // Stores key and its corresponding node in the doubly linjed list
    private Node head, tail; // Head and tail of the doubly linked list

    // Constructor to initialize the LRUCache with a given capacity
    public LRUCache(int capacity) {
        this.capacity = capacity;
        this.cache = new HashMap<>();

        // Initialize the head and tail as null initially
        head = tail = null;
    }

    // Function to move a node to the end (mark it as most recently used)
    private void moveToEnd(Node node) {
        // If the node is already at the tail, no need to move it
        if (node == tail) {
            return;
        }

        // Remove the node from the current position
        if (node.previous != null) {
            node.previous.next = node.next;
        }

        node.next.previous = node.previous;

        // If the node was the head
        if (node == head) {
            head = node.next;
        }

        // Add the node at the end (most recently used)
        node.previous = tail;
        node.next = null;
        tail.next = node;
        tail = node;
    }

    // Function to add a new node to the end (most recently used)
    private void append(Node node) {
        if (head == null) {
            head = tail = node;
        } else {
            tail.next = node;
            node.previous = tail;
            tail = node;
        }
    }

    // Function to remove the least recently used node (head of the doubly linked list)
    private void removeLruNode() {
        if (head == null) {
            return;
        }
        // Remove the head (LRU node)
        Node toRemove = head;

        if (head == tail) {
            head = tail = null;
        } else {
            head = head.next;
        }

        cache.remove(toRemove.pair.key); // Remove from cache map
    }

    // Function to get the value for a given key
    public int get(int key) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            moveToEnd(node); // Move the accessed node to the end (MRU)
            return node.pair.value;
        }
        return -1; // Return -1 if the key doesn't exist
    }

    // Function to put a key-value pair into the cache
    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            Node node = cache.get(key);
            node.pair.value = value; // Update the value if the key already exists
            moveToEnd(node); // Move the updated node to the end (MRU)
        } else {
            Node newNode = new Node(key, value);
            cache.put(key, newNode);
            append(newNode); // Add the new node as the most recently used

            if (cache.size() > capacity) {
                // If the cache exceeds the capacity, remove the least recently used node
                removeLruNode();
            }
        }
    }
}
