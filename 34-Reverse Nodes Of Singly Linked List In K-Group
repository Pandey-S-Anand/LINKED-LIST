/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Naive implementation
 
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (k == 1) {
            return head; // No need to reverse if k == 1 
        }

        // Step 1: Reverse the first k nodes separately
        ListNode kthNode = findKthNodeIfPresent(head, k); // Get the kth node from the first group (i.e tail of first group)
        ListNode nextGroupHead = kthNode.next; // Save the next group's head
        kthNode.next = null; // Temporarily break the list to isolate the first k nodes

        /* 🔁 Important: After reversing k nodes:
        - The original head of the group becomes the tail
        - The kth node (tail of the group before reversal) becomes the new head
        */
        reverseList(head); // Reverse the first k nodes

        ListNode newHead = kthNode; // After reversing, kthNode becomes new head (was originally tail)
        head.next = nextGroupHead; // Connect the tail (was originally head) to the next group head
        ListNode lastGroupTail = head; // Update lastGroupTail to point to the first group tail (i.e originally head)

        // Step 2: Process the rest of the list group by group
        ListNode currentNode = nextGroupHead;

        while (currentNode != null) {
            // Try to get the kth node in the next group
            kthNode = findKthNodeIfPresent(currentNode, k);
            if (kthNode == null) {
                break; // Less than k nodes left — no more reversal
            }

            nextGroupHead = kthNode.next; // Save the head of the next group
            kthNode.next = null; // Break the current group from the rest

            reverseList(currentNode); // Reverse current k-group

            lastGroupTail.next = kthNode; // Link the last group tail to current group's head (was originally tail)
            lastGroupTail = currentNode; // Update the tail pointer to current group's tail (was originally head)

            currentNode = nextGroupHead; // Move to the next group
        }

        // Attach any remaining nodes (less than k) at the end
        lastGroupTail.next = currentNode;

        return newHead; // Return the head of the fully processed list
    }

    private ListNode findKthNodeIfPresent(ListNode head, int k) {
        ListNode currentNode = head;
        while (currentNode != null && k > 1) {
            currentNode = currentNode.next;
            k--;
        }
        return currentNode; // Return the k-th node (or null if not enough nodes)
    }

    private void reverseList(ListNode head) {
        ListNode prevNode = null;
        ListNode currentNode = head;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
    }
}


//Concise implementation

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if (k == 1) {
            return head;
        }

        ListNode currentNode = head;
        ListNode lastGroupTail = null;

        while (currentNode != null) {
            ListNode kthNode = findKthNodeIfPresent(currentNode, k);
            if (kthNode == null) {
                break;
            }

            ListNode nextGroupHead = kthNode.next;
            kthNode.next = null;

            reverseList(currentNode);

            // Set head to the new head of the first reversed group (originally the kth node, i.e., the tail of the first group)
            if (lastGroupTail == null) {
                head = kthNode;
            }

            if (lastGroupTail != null) {
                lastGroupTail.next = kthNode;
            }

            lastGroupTail = currentNode;

            currentNode = nextGroupHead;
        }

        lastGroupTail.next = currentNode;

        return head;
    }

    private ListNode findKthNodeIfPresent(ListNode head, int k) {
        ListNode currentNode = head;
        while (currentNode != null && k > 1) {
            currentNode = currentNode.next;
            k--;
        }
        return currentNode;
    }

    private void reverseList(ListNode head) {
        ListNode prevNode = null;
        ListNode currentNode = head;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
    }
}
