//Bruteforce approoach

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
class Solution {
    private ListNode newHead;

    public ListNode doubleIt(ListNode head) {
        ListNode reversedHead = reverseList(head);
        doubleReversedNumber(reversedHead);
        return newHead;
    }

    private void doubleReversedNumber(ListNode num) {
        int carry = 0;

        while (num != null || carry == 1) {
            int digit = num == null ? 0 : num.val;

            int sum = (2 * digit) + carry;
            carry = sum / 10;
            insertAtFront(new ListNode(sum % 10));

            num = num == null ? null : num.next;
        }
    }

    private void insertAtFront(ListNode newNode) {
        newNode.next = newHead; // Link the new node to the current head
        newHead = newNode; // Update the head pointer
    }

    private ListNode reverseList(ListNode head) {
        if (head == null) {
            return null;
        }

        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        return prevNode;
    }
}


//Optimal approach

class Solution {
    public ListNode doubleIt(ListNode head) {
        ListNode currentNode = head;

        /*
         * The key observation is that a carry is generated only when a digit is 5 or greater.
         * If the next digit (to the right) is 5 or more, we increment the current digit
         * to account for the carry.
         * 
         * Note: Carry can only be 1 or 0.
         */
        while (currentNode != null) {
            int doubledValue = 2 * currentNode.val; // Doubling the current digit
            ListNode nextNode = currentNode.next;

            if (doubledValue > 9) {
                int finalDigit = doubledValue % 10; // Extract last digit, 1 will be carry

                /*
                 * The remainder can never exceed 8, so adding 1 (due to carry from next digit)
                 * won't make it more than 9.
                 *
                 * Consider all possible digits (0-9) and their doubled values:
                 * 0 → 0, 1 → 2, 2 → 4, 3 → 6, 4 → 8, 5 → 10, 6 → 12, 7 → 14, 8 → 16, 9 → 18
                 * The remainders are: 0, 2, 4, 6, 8, 0, 2, 4, 6, 8.
                 * Thus, in no case does the remainder exceed 8, so adding 1 at most results in 9.
                 */
                if (shouldCarry(nextNode)) {
                    finalDigit++;
                }

                // If the head node itself results in a carry, prepend a new node with value 1 (carry)
                if (currentNode == head) {
                    ListNode newHead = new ListNode(1);
                    newHead.next = head;
                    head = newHead;
                }

                currentNode.val = finalDigit;
            } else {
                if (shouldCarry(nextNode)) {
                    doubledValue++;
                }
                currentNode.val = doubledValue;
            }
            currentNode = currentNode.next;
        }

        return head;
    }

    // Method to check if the next node has a value ≥ 5 (which would contribute to carry)
    private boolean shouldCarry(ListNode nextNode) {
        return nextNode != null && nextNode.val >= 5;
    }
}
