/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
//Bruteforce approoach

class Solution {
    // Helper inner class to build the resulting linked list from front efficiently
    private static class SinglyLinkedList {
        private ListNode head;
        private ListNode tail;

        private void insertAtFront(int num) {
            ListNode node = new ListNode(num);
            if (head == null) {
                head = tail = node;
            } else {
                node.next = head;
                head = node;
            }
        }
    }

    public ListNode doubleIt(ListNode head) {
        // Reverse the input list to process digits from least significant to most significant
        ListNode currentNode = reverse(head);

        // The list to hold the sum (doubled number)
        SinglyLinkedList sum = new SinglyLinkedList();

        int carry = 0;
        int base = 0;

        // Traverse the reversed list digit by digit
        while (currentNode != null) {
            // Double current digit and add carry
            int digitSum = (2 * currentNode.val) + carry;

            // Extract the single digit to store
            base = digitSum % 10;

            // Update carry for next iteration 
            carry = digitSum / 10;

            // Insert the digit at the front of the result list
            sum.insertAtFront(base);

            // Move to next digit
            currentNode = currentNode.next;
        }

        // If carry remains after the last digit, insert it at the front
        if (carry == 1) {
            sum.insertAtFront(carry);
        }

        // Return the head of the new list representing the doubled number
        return sum.head;
    }

    private ListNode reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        // prevNode is the new head of reversed list
        return prevNode;
    }
}


//Better approach

class Solution {
    public ListNode doubleIt(ListNode head) {
        // Reverse the linked list to start doubling from the least significant digit
        ListNode newHead = reverse(head);

        ListNode currentNode = newHead;
        int base = 0, carry = 0;

        // Traverse the reversed list, doubling each digit and managing carry
        while (currentNode != null) {
            int digitSum = (2 * currentNode.val) + carry; // Double current digit and add carry
            base = digitSum % 10; // Extract the digit to keep
            carry = digitSum / 10; // Calculate carry for next digit
            currentNode.val = base; // Update current node's value with doubled digit
            currentNode = currentNode.next; // Move to next digit/node
        }

        // After processing all digits, if there's still a carry, add a new node with value 1 at the end
        if (carry == 1) {
            // Note: 'head' here refers to the original list's head, which is now the tail of the reversed list.
            head.next = new ListNode(1); // So we add the new carry node at the end of the reversed list.
        }

        // Reverse the list again to restore original digit order
        return reverse(newHead);
    }

    private ListNode reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        // prevNode is new head after reversal
        return prevNode;
    }
}


//Optimal approach

class Solution {
    // Helper class to maintain head and tail references of the new list being built
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        // Inserts a node at the front of the list represented by this NodePair
        private void insertAtFront(ListNode node) {
            node.next = null; // Disconnect node from its previous next reference
            if (head == null) {
                // If list is empty, node becomes both head and tail
                head = tail = node;
            } else {
                // Otherwise, insert node before the current head
                node.next = head;
                head = node;
            }
        }
    }

    public ListNode doubleIt(ListNode head) {
        // Reverse the input list to process from least significant digit first
        ListNode newHead = reverse(head);

        NodePair sum = new NodePair(); // Will hold the resulting doubled number list
        ListNode currentNode = newHead;

        int base = 0;
        int carry = 0;

        // Traverse reversed list and double each digit with carry
        while (currentNode != null) {
            int digitSum = (2 * currentNode.val) + carry; // Double current digit and add carry
            base = digitSum % 10; // Extract digit to store in node
            carry = digitSum / 10; // Calculate carry for next iteration

            currentNode.val = base; // Update current node value with doubled digit

            ListNode nextNode = currentNode.next; // Save next node before modifying links
            sum.insertAtFront(currentNode); // Insert the updated node at the front of the sum list
            currentNode = nextNode; // Move to next node
        }

        // After processing all nodes, if carry is left, insert it at the front
        if (carry == 1) {
            sum.insertAtFront(new ListNode(1));
        }

        // Return head of the new doubled number list, which is in correct order
        return sum.head;
    }

    private ListNode reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        // prevNode is the new head of the reversed list
        return prevNode;
    }
}
