/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Naive approach

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        // Edge case: No reversal needed if left == right
        if (left == right) {
            return head;
        }

        // Find key boundary nodes: 
        // 1. Node before the left position (leftNodePrev)
        // 2. Node at the left position (leftNode)
        // 3. Node at the right position (rightNode)
        // 4. Node after the right position (rightNodeNext)
        ListNode[] nodeInfo = findBoundaryNodes(head, left, right);
        ListNode leftNodePrev = nodeInfo[0];
        ListNode leftNode = nodeInfo[1];
        ListNode rightNode = nodeInfo[2];
        ListNode rightNodeNext = rightNode.next;

        if (leftNodePrev == null) {
            // Case: Sublist to be reversed starts at the head (i.e., left == 1)
            rightNode.next = null; // Temporarily break the list
            reverse(leftNode); // Reverse sublist from left to right
            leftNode.next = rightNodeNext; // Reconnect the tail of reversed part to rightNodeNext
            return rightNode; // rightNode becomes new head after reversal
        }

        // Case: Sublist starts somewhere after head
        leftNodePrev.next = null; // Temporarily break the list before leftNode
        rightNode.next = null; // Temporarily break the list after rightNode

        reverse(leftNode); // Reverse the sublist from left to right

        // Reconnect:
        leftNodePrev.next = rightNode; // Connect node before reversal to new head of reversed sublist
        leftNode.next = rightNodeNext; // Connect tail of reversed sublist to remaining list

        return head; // Head remains unchanged in this case
    }

    private void reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
    }

    private ListNode[] findBoundaryNodes(ListNode head, int left, int right) {
        ListNode leftNodePrev = null;
        ListNode leftNode = null;
        ListNode currentNode = head;

        for (int count = 1; count < right; count++) {
            if (count == left - 1) {
                leftNodePrev = currentNode; // Save node before the left node
            }

            if (count == left) {
                leftNode = currentNode; // Save left node
            }

            currentNode = currentNode.next; // Move forward
        }

        // currentNode is now at position 'right'
        return new ListNode[] { leftNodePrev, leftNode, currentNode };
    }
}


//Optimal approach

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        // Edge case: No reversal needed if left == right
        if (left == right) {
            return head;
        }

        // Step 1: Find the node at 'left' and its previous node (if any)
        ListNode[] nodes = findLeftNodeAndPrecedingNode(head, left);
        ListNode leftNodePrev = nodes[0]; // Node just before position 'left' (can be null if left == 1)
        ListNode leftNode = nodes[1]; // Node at position 'left' which becomes the tail of the reversed sublist

        // Step 2: If there's a node before 'left', temporarily disconnect it
        // This helps isolate the reversal section
        if (leftNodePrev != null) {
            leftNodePrev.next = null;
        }

        /*
         * Step 2: Reverse the sublist from 'left' to 'right'.
         * This returns:
         *  - newHead: the new head of the reversed sublist (was originally the 'right' node)
         *  - rightNext: the node immediately after the 'right' node
         */
        ListNode[] nodeInfo = reverseRange(leftNode, left, right);
        ListNode newHead = nodeInfo[0]; // New head of reversed segment
        ListNode rightNext = nodeInfo[1]; // Node after the 'right' position

        // Step 4: Reconnect reversed segment back to the original list
        if (leftNodePrev != null) {
            // Connect the node before 'left' to the new head of the reversed segment
            leftNodePrev.next = newHead;
        }

        // Connect the tail of the reversed sublist (original 'leftNode') to the node after 'right'
        leftNode.next = rightNext;

        // Step 5: Return the new head
        // If reversal began at head (i.e left == 1), the new head is the newHead  Else, return the original head of the linked list
        return (leftNodePrev == null) ? newHead : head;
    }

    private ListNode[] findLeftNodeAndPrecedingNode(ListNode head, int left) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        for (int count = 1; count < left; count++) {
            prevNode = currentNode;
            currentNode = currentNode.next;
        }

        return new ListNode[] { prevNode, currentNode };
    }

    private ListNode[] reverseRange(ListNode leftNode, int left, int right) {
        ListNode prevNode = null;
        ListNode currentNode = leftNode;

        for (int count = left; count <= right; count++) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        // After loop:
        // prevNode = new head of reversed sublist (was tail in the original sublist)
        // currentNode = node after the 'right' position
        return new ListNode[] { prevNode, currentNode };
    }
}
