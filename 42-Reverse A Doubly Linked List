//Bruteforce Approach

class Solution {
    public DLLNode reverseDLL(DLLNode head) {
        // Edge case : If the doubly linked list is empty or it contains a single node
        if (head == null || head.next == null) {
            return head;
        }

        // Find the tail of the doubly linked list
        DLLNode tail = getTail(head);

        DLLNode start = head;
        DLLNode end = tail;
        /*
         * - For odd-sized lists: Until `start` equals `end`.
         * - For even-sized lists: Until `start` and `end` pointers cross each other.
         */
        while (start != end && start.prev != end) {
            swap(start, end); // Swap the data
            start = start.next; // Swap the data
            end = end.prev; // Move end backward
        }

        return head;
    }

    private DLLNode getTail(DLLNode head) {
        DLLNode currentNode = head;

        while (currentNode.next != null) {
            currentNode = currentNode.next;
        }

        return currentNode;
    }

    private void swap(DLLNode start, DLLNode end) {
        int temp = start.data;
        start.data = end.data;
        end.data = temp;
    }
}


//Optimal Approach

class Solution {
    public DLLNode reverseDLL(DLLNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        DLLNode slow = head;
        DLLNode fast = head;
        DLLNode fastPrev = null; // Tracks the node just before the fast pointer during traversal

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fastPrev = fast.next; // Update fastPrev to the next node of fast
            fast = fast.next.next;
        }

        DLLNode end;

        if (fast == null) {
            // If the fast pointer is null, the list size is even. The tail node is pointed to by fastPrev
            end = fastPrev;
        } else {
            // If the fast pointer is not null, the list size is odd. The tail node is pointed to by fast
            end = fast;
        }

        DLLNode start = head;
        while (start != end && start.prev != end) {
            swap(start, end);
            start = start.next;
            end = end.prev;
        }

        return head;
    }

    private void swap(DLLNode start, DLLNode end) {
        int temp = start.data;
        start.data = end.data;
        end.data = temp;
    }
}
