/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

/* 
 * CRUX:
 * 
 * - Extra nodes (when total size is not perfectly divisible by k) must be distributed among the first 'extraNodes' partitions.
 * - This ensures that the size difference between any two parts is at most one, as required by the problem.
 * - The order of nodes in the original linked list must be preserved in the resulting parts.
 */

class Solution {
    // Splits a singly linked list into k parts as evenly as possible
    public ListNode[] splitListToParts(ListNode head, int k) {
        ListNode[] partitions = new ListNode[k]; // Result array to store each part's head
        int index = 0;

        // Step 1: Calculate total size of the list
        int size = getSize(head);

        // Step 2: Calculate minimum nodes in each part and how many extra nodes we need to distribute
        int minNodesPerPartition = size / k;
        int extraNodes = size % k;

        ListNode currentPartitionHead = head;

        // Step 3: Build each partition one by one
        while (currentPartitionHead != null) {
            partitions[index++] = currentPartitionHead; // Assign the current part's head
            ListNode prevNode = null;
            ListNode currentNode = currentPartitionHead;

            // Traverse minNodesPerPartition nodes
            for (int i = 1; i <= minNodesPerPartition; i++) {
                prevNode = currentNode;
                currentNode = currentNode.next;
            }

            // If extra nodes are remaining, add one more node to this part
            if (extraNodes > 0) {
                prevNode = currentNode;
                currentNode = currentNode.next;
                extraNodes--;
            }

            // Cut off the current part from the rest of the list
            prevNode.next = null;

            // Move to the next part
            currentPartitionHead = currentNode;
        }

        return partitions;
    }

    private int getSize(ListNode head) {
        ListNode fast = head;
        int size = 0;

        while (fast != null && fast.next != null) {
            fast = fast.next.next;
            size += 2;
        }

        if (fast != null) {
            size++;
        }

        return size;
    }
}
