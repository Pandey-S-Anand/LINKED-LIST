class Solution {
    Node addNode(Node head, int index, int data) {
        Node currentNode = head;

        // Traverse the list to reach the node immediately before the given index.
        while (index > 0) {
            index--;
            currentNode = currentNode.next;
        }

        // Create the new node to be inserted.
        Node newNode = new Node(data);
        // Case 1: If the current node is the last node in the doubly linked list, i.e., we have to add the new node at the end.
        if (currentNode.next == null) {
            newNode.prev = currentNode; // Link the new node's previous to the current node.
            currentNode.next = newNode; // Link the current node's next to the new node.
        } else { // Case 2: If the new node is inserted between two existing nodes.
            newNode.prev = currentNode; // Link the new node's previous to the current node.
            newNode.next = currentNode.next; // Link the new node's next to the next node of the current node.
            currentNode.next.prev = newNode; // Update the next node's previous link to point to the new node.
            currentNode.next = newNode; // Link the current node's next to the new node.
        }

        return head; // Return the updated head of the list.
    }
}
