class Solution {
    // Helper class to build the filtered linked list dynamically
    private static class NodeBuilder {
        private Node head; 
        private Node tail; 

        // Appends a node to the end of the filtered list
        private void append(Node node) {
            if (head == null) {
                head = tail = node; 
            } else {
                tail.next = node;   
                tail = node;
            }
        }
    }

    static Node deleteAllOccurOfX(Node head, int x) {
        NodeBuilder filteredList = new NodeBuilder();
        Node currentNode = head;

        // Traverse the original list
        while (currentNode != null) {
            if (currentNode.data != x) {
                filteredList.append(currentNode);  // Keep the node if it's not equal to x
            }
            currentNode = currentNode.next;
        }

        // Break connection from the last valid node to any old remaining nodes
        filteredList.tail.next = null;

        return filteredList.head; // Return the head of the filtered list
    }
}
