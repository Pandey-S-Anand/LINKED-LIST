//Bruteforce Approach

/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        List<Integer> nodeData = new ArrayList<>();

        ListNode currentNode = head;

        while (currentNode != null) {
            nodeData.add(currentNode.val);
            currentNode = currentNode.next;
        }

        return isPalindrome(nodeData);
    }

    private boolean isPalindrome(List<Integer> arr) {
        int start = 0, end = arr.size() - 1;

        while (start < end) {
            if (arr.get(start) != arr.get(end)) {
                return false;
            }

            start++;
            end--;
        }

        return true;
    }
}


//Improved Approach

class Solution {
    public boolean isPalindrome(ListNode head) {
        // Stack to store node values
        Deque<Integer> stack = new ArrayDeque<>();

        ListNode currentNode = head;
        // Traverse the linked list and push all node values onto the stack
        while (currentNode != null) {
            stack.push(currentNode.val);
            currentNode = currentNode.next;
        }

        currentNode = head;
        // Traverse the linked list again and compare node values with stack elements
        while (currentNode != null) {
            if (currentNode.val != stack.pop()) { // Compare with the top of the stack
                return false; // If values mismatch, it's not a palindrome
            }
            currentNode = currentNode.next; // Move to the next node
        }

        return true; // All values matched, it's a palindrome
    }
}


//Optimal Approach

class Solution {
    public boolean isPalindrome(ListNode head) {
        // Step 1: Find the middle node of the linked list using Floyd's Tortoise and Hare algorithm
        ListNode middleNode = findMiddleNode(head);

        /*
         * Example 1: Even number of nodes
         *   Input: 1 -> 2 -> 2 -> 1
         *   Middle node points to the second '2'
         *   First half before middle: 1 -> 2
         *   Second half from middle (after reversing): 1 -> 2
         * 
         * Example 2: Odd number of nodes
         *   Input: 1 -> 2 -> 3 -> 2 -> 1
         *   Middle node points to '3'
         *   First half before middle: 1 -> 2 (last node of first half (i.e 2) points to the last node of the reversed half (i.e 3))
         *   Second half from middle (after reversing): 1 -> 2 -> 3 
         *   While comparing, we skip the exact middle node.
         */

        // Step 2: Reverse the second half of the list starting from middle node
        ListNode currentNode1 = head;
        ListNode currentNode2 = reverse(middleNode);

        // Step 3: Compare values from the beginning and from the reversed second half
        while (currentNode2 != null) {
            if (currentNode1.val != currentNode2.val) {
                return false; // Mismatch found, not a palindrome
            }

            currentNode1 = currentNode1.next;
            currentNode2 = currentNode2.next;
        }

        // All values matched => it is a palindrome
        return true;
    }

    private ListNode findMiddleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    private ListNode reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        return prevNode; // New head of reversed list
    }
}
