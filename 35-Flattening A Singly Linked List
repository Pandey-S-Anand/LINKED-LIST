//Bruteforce approach

class Solution {
    Node flatten(Node root) {
        Node currentNode = root;
        List<Integer> nodeValues = new ArrayList<>();

        // Collect all values from the multilevel singly linked list
        while (currentNode != null) {
            Node currentBottomNode = currentNode;
            while (currentBottomNode != null) {
                nodeValues.add(currentBottomNode.data);
                currentBoottomNode = currentBottomNode.bottom;
            }
            currentNode = currentNode.next;
        }

        Collections.sort(nodeValues);
        // Create a new flattened singly linked list using the bottom pointer
        SinglyLinkedList singlyLinkedList = new SinglyLinkedList();

        for (int nodeValue : nodeValues) {
            singlyLinkedList.append(nodeValue);
        }

        return singlyLinkedList.getHead();
    }
}

class SinglyLinkedList {
    private Node head;
    private Node tail;

    public Node getHead() {
        return this.head;
    }

    public void append(int data) {
        Node node = new Node(data);
        if (head == null) {
            head = tail = node;
        } else {
            tail.bottom = node;
            tail = node;
        }
    }
}


//Improved approach

class Solution {
    private Node head;
    private Node tail;

    Node flatten(Node root) {
        Node currentNode = root;
        List<Integer> nodeValues = new ArrayList<>();

        while (currentNode != null) {
            Node currentBottomNode = currentNode;
            while (currentBottomNode != null) {
                nodeValues.add(currentBottomNode.data);
                currentBottomNode = currentBottomNode.bottom;
            }
            currentNode = currentNode.next;
        }

        Collections.sort(nodeValues);

        for (int nodeValue : nodeValues) {
            append(nodeValue);
        }

        return head;
    }

    private void append(int data) {
        Node node = new Node(data);
        if (head == null) {
            head = tail = node;
        } else {
            tail.bottom = node;
            tail = node;
        }
    }
}



//Optimal approach

class Solution {
    private Node flattenedHead; // Head of the final merged singly linked list
    private Node flattenedTail; // Tail of the final merged singly linked list

    Node flatten(Node head) {
        if (head == null || head.next == null) {
            return head; // Base case: return if there is only one singly linked list or none
        }

        // Recursively flatten the next singly linked lists first
        Node nextFlattenedHead = flatten(head.next);

        // Merge the current singly linked list with the already flattened next singly linked list
        return merge(head, nextFlattenedHead);
    }

    private Node merge(Node list1, Node list2) {
        flattenedHead = flattenedTail = null;
        Node currentNode1 = list1;
        Node currentNode2 = list2;

        // Merge two sorted bottom-linked singly linked lists
        while (currentNode1 != null && currentNode2 != null) {
            if (currentNode1.data <= currentNode2.data) {
                appendToFlattenedSinglyLinkedList(currentNode1);
                currentNode1 = currentNode1.bottom;
            } else {
                appendToFlattenedSinglyLinkedList(currentNode2);
                currentNode2 = currentNode2.bottom;
            }
        }

        // Append any remaining nodes in the singly linked lists
        if (currentNode1 != null) {
            appendToFlattenedSinglyLinkedList(currentNode1);
            currentNode1 = currentNode1.bottom;
        }

        if (currentNode2 != null) {
            appendToFlattenedSinglyLinkedList(currentNode2);
            currentNode2 = currentNode2.bottom;
        }

        return flattenedHead; // Return the new head of the merged bottom-linked singly linked list
    }

    private void appendToFlattenedSinglyLinkedList(Node node) {
        if (flattenedHead == null) {
            flattenedHead = flattenedTail = node; // Initialize the singly linked list
        } else {
            flattenedTail.bottom = node; // Append at the bottom
            flattenedTail = flattenedTail.bottom; // Move tail forward
        }
    }
}
