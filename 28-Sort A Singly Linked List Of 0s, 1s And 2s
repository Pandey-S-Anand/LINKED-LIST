//Bruteforce Approach

class Solution {
    static Node segregate(Node head) {
        // Initialize currentNode to traverse the linked list
        Node currentNode = head;
        
        // Counters for number of 0s, 1s, and 2s in the list
        int count0 = 0, count1 = 0, count2 = 0;

        // First traversal: count the occurrences of 0, 1 and 2
        while (currentNode != null) {
            int value = currentNode.data;

            if (value == 0) {
                count0++;
            } else if (value == 1) {
                count1++;
            } else {
                count2++;
            }

            // Move to the next node
            currentNode = currentNode.next;
        }

        // Reset currentNode to the head of the list for second traversal
        currentNode = head;

        // Second traversal: overwrite node data with 0s, count0 times
        while (count0-- > 0) {
            currentNode.data = 0;
            currentNode = currentNode.next;
        }

        // Continue overwriting with 1s, count1 times
        while (count1-- > 0) {
            currentNode.data = 1;
            currentNode = currentNode.next;
        }

        // Finally, overwrite with 2s, count2 times
        while (count2-- > 0) {
            currentNode.data = 2;
            currentNode = currentNode.next;
        }

        // Return the head of the sorted linked list
        return head;
    }
}



//Optimal Approach

class Solution {
    private static class NodePair {
        private Node head;
        private Node tail;
        
        // Appends a node to this group while maintaining head and tail pointers
        void append(Node node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    Node segregate(Node head) {
        // Create separate NodePair containers for each group
        NodePair zeroGroup = new NodePair();
        NodePair oneGroup = new NodePair();
        NodePair twoGroup = new NodePair();

        Node current = head;

        // Step 1: Distribute nodes into zeroGroup, oneGroup, and twoGroup
        while (current != null) {
            if (current.data == 0) {
                zeroGroup.append(current);
            } else if (current.data == 1) {
                oneGroup.append(current);
            } else {
                twoGroup.append(current);
            }
            current = current.next;
        }
        
        // Step 2: Prevent cycles by terminating the current group tails
        if (zeroGroup.tail != null) {
            zeroGroup.tail.next = null;
        }
        
        if (oneGroup.tail != null) {
            oneGroup.tail.next = null;
        }
        
        if (twoGroup.tail != null) {
            twoGroup.tail.next = null;
        }

        // Step 2: Connect the three groups using a dedicated function
        return connectGroups(zeroGroup, oneGroup, twoGroup);
    }

    private Node connectGroups(NodePair zeroGroup, NodePair oneGroup, NodePair twoGroup) {
        // Case 1: 0s are present
        if (zeroGroup.head != null) {
            if (oneGroup.head == null && twoGroup.head == null) {
                return zeroGroup.head; // Only 0s present
            }

            if (oneGroup.head != null && twoGroup.head != null) { // 0s, 1s, and 2s present
                zeroGroup.tail.next = oneGroup.head;
                oneGroup.tail.next = twoGroup.head;
            } else if (oneGroup.head == null) { // 0s and 2s present
                zeroGroup.tail.next = twoGroup.head;
            } else { // 0s and 1s present
                zeroGroup.tail.next = oneGroup.head;
            }

            return zeroGroup.head;
        }

        // Case 2: 0s absent, 1s are present
        if (oneGroup.tail != null) {
            if (twoGroup.head != null) { // 1s and 2s present
                oneGroup.tail.next = twoGroup.head;
            }
            return oneGroup.head; // Only 1s present
        }

        // Case 3: Only 2s present
        if (twoGroup.tail != null) {
            return twoGroup.head;
        }

        // Case 4: Empty list (head was null)
        return null;
    }
}
