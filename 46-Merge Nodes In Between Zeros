/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Bruteforce approach

class Solution {
    private ListNode mergedHead;
    private ListNode mergedTail;

    public ListNode mergeNodes(ListNode head) {
        ListNode currentNode = head.next;
        int sum = 0;

        while (currentNode != null) {
            int value = currentNode.val;
            sum += value;

            if (value == 0) {
                append(sum);
                sum = 0;
            }

            currentNode = currentNode.next;
        }

        return mergedHead;
    }

    private void append(int data) {
        ListNode newNode = new ListNode(data);
        if (mergedHead == null) {
            mergedHead = mergedTail = newNode;
        } else {
            mergedTail.next = newNode;
            mergedTail = newNode;
        }
    }
}


//Optimal approach

class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode lastPosition = null; // Last node where a merged value was inserted
        ListNode insertPosition = head; // Tracks where the next merged value should be inserted
        ListNode currentNode = head.next; // Start from the second node (next of head)
        int sum = 0; // Variable to accumulate the sum between zeros

        while (currentNode != null) {
            int value = currentNode.val;
            sum += value;

            // When a zero is encountered, insert the sum and move the insertion pointer
            if (value == 0) {
                insertPosition.val = sum; // Insert the accumulated sum at insertPosition
                lastPosition = insertPosition; // Update the lastPosition to the current insertPosition
                insertPosition = insertPosition.next; // Move insertPosition to the next node
                sum = 0; // Reset the sum for the next sequence
            }

            currentNode = currentNode.next;
        }

        // Set the next of the last position to null to terminate the modified singly
        // linked list
        lastPosition.next = null;

        return head;
    }
}
