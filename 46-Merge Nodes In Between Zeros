/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    private static class NodeBuilder {
        private ListNode head;
        private ListNode tail;

        // Appends a new node at the end of the list
        private void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode mergeNodes(ListNode head) {
        NodeBuilder list = new NodeBuilder();

        // Start processing from the node after the first 0, as per the problem guarantee that the first and last nodes are always 0
        ListNode currentNode = head.next;

        while (currentNode != null) {
            int segmentSum = 0;

            // Sum all values until the next 0 (end of the current segment)
            while (currentNode.val != 0) {
                segmentSum += currentNode.val;
                currentNode = currentNode.next;
            }

            // Create a new node with the segment sum and append it to the result list
            list.append(new ListNode(segmentSum));

            // Move to the node after 0 to process the next segment
            currentNode = currentNode.next;
        }

        return list.head;
    }
}
