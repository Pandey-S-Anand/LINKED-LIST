/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

 //Bruteforce approach

class Solution {

    public int[] nodesBetweenCriticalPoints(ListNode head) {
        // Step 1: Get positions of all critical points
        List<Integer> criticalPointsPosition = getAllCriticalPoints(head);

        // If there are fewer than 2 critical points, return [-1, -1] as required
        if (criticalPointsPosition.size() < 2) {
            return new int[] { -1, -1 };
        }

        // Step 2: Compute max distance = distance between first and last critical point
        int maxDistance = criticalPointsPosition.get(criticalPointsPosition.size() - 1) - criticalPointsPosition.get(0);

        // Step 3: Compute minimum distance â€” this is the smallest distance between any two adjacent critical points
        int minDistance = Integer.MAX_VALUE;
        for (int i = 0; i < criticalPointsPosition.size() - 1; i++) {
            int distance = criticalPointsPosition.get(i + 1) - criticalPointsPosition.get(i);
            minDistance = Math.min(minDistance, distance);
        }

        // Return result as [minDistance, maxDistance]
        return new int[] { minDistance, maxDistance };
    }

    private List<Integer> getAllCriticalPoints(ListNode head) {
        List<Integer> criticalPointsPosition = new ArrayList<>();

        // The first and last nodes can never be critical points because they are missing one of the neighbors
        ListNode currentNode = head.next; // Start from the second node
        ListNode prevNode = head;
        int currentPosition = 1; // head is at position 1

        // Traverse until the second last node
        while (currentNode.next != null) {
            currentPosition++; // Move to the currentNode's position

            // Check if currentNode is a local maxima or minima
            if (isCriticalPoint(currentNode.val, prevNode.val, currentNode.next.val)) {
                criticalPointsPosition.add(currentPosition);
            }

            // Move pointers forward
            prevNode = currentNode;
            currentNode = currentNode.next;
        }

        return criticalPointsPosition;
    }

    private boolean isCriticalPoint(int currentValue, int prevValue, int nextValue) {
        return (currentValue > prevValue && currentValue > nextValue) ||
                (currentValue < prevValue && currentValue < nextValue);
    }
}


//Optimal approach

class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        // Initialize pointers to traverse the list and track positions
        ListNode currentNode = head.next, prevNode = head;

        int position = 1; // Position tracker (as we skip the head initially)
        int firstCriticalPointPosition = -1; // Stores position of the first critical point
        int lastCriticalPointPosition = -1;  // Stores position of the most recently found critical point
        int minDistance = Integer.MAX_VALUE; // Tracks the smallest distance between any two critical points

        // Traverse from the second node to the second-last node
        while (currentNode.next != null) {
            position++; // Move to next position

            // Check if current node is a critical point
            if (isCriticalPoint(currentNode.val, prevNode.val, currentNode.next.val)) {
                if (firstCriticalPointPosition == -1) {
                    // First critical point found
                    firstCriticalPointPosition = position;
                    lastCriticalPointPosition = position;
                } else {
                    // Compute minimum distance between current and previous critical points
                    minDistance = Math.min(minDistance, position - lastCriticalPointPosition);
                    lastCriticalPointPosition = position;
                }
            }

            // Move both pointers forward
            prevNode = currentNode;
            currentNode = currentNode.next;
        }

        // If fewer than 2 critical points were found, return [-1, -1]
        if (lastCriticalPointPosition == firstCriticalPointPosition) {
            return new int[] { -1, -1 };
        }

        // Maximum distance is between the first and last critical points found
        int maxDistance = lastCriticalPointPosition - firstCriticalPointPosition;

        return new int[] { minDistance, maxDistance };
    }

    // Helper method to determine if a node is a critical point
    private boolean isCriticalPoint(int currValue, int prevValue, int nextValue) {
        return (currValue > prevValue && currValue > nextValue) || (currValue < prevValue && currValue < nextValue);
    }
}
