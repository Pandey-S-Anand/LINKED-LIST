//Bruteforce approach

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Step 1: Find the total number of nodes in the linked list
        int size = getSize(head);

        // Step 2: Calculate the index (from the start) of the node to be removed
        int targetIndex = size - n;

        // Edge case: If the head node is to be removed
        if (targetIndex == 0) {
            return head.next; // Return the next node as the new head
        }

        // Step 3: Traverse to the target node (the one to be deleted)
        ListNode currentNode = head;
        ListNode prevNode = null;
        while (targetIndex > 0) {
            prevNode = currentNode;
            currentNode = currentNode.next;
            targetIndex--;
        }

        // Step 4: Remove the target node by skipping it
        prevNode.next = prevNode.next.next;
        currentNode.next = null; // Optional: disconnect for garbage collection

        // Step 5: Return the head of the list
        return head;
    }

    private int getSize(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        int size = 0;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            size += 2;
        }

        if (fast != null) {
            size++;
        }

        return size;
    }
}


//Optimal approach

/*
 * The algorithm uses the two-pointer technique to efficiently remove the N-th node from the end of the list.
 * 
 * 1. The fast pointer is advanced by `n` steps ahead of the slow pointer. This creates a gap of `n` nodes between them.
 *    - By the time the fast pointer reaches the last node (i.e., `fast.next == null`), the slow pointer will be 
 *      positioned just before the node that needs to be deleted.
 * 
 * 2. After advancing the fast pointer, both pointers (fast and slow) are moved simultaneously, one step at a time, 
 *    until the fast pointer reaches the last node. This ensures that when the fast pointer reaches the last node, 
 *    the slow pointer is at the node just before the target node to be deleted.
 * 
 * 3. If the fast pointer becomes `null` after moving `n` steps, it means the node to be deleted is the head of the list.
 *    - In this case, we return `head.next`, effectively removing the head node.
 */

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        // Special case: If the singly linked list is empty, return null
        if (head == null) {
            return null;
        }
        
        // Initialize two pointers, fast and slow, both starting from the head
        ListNode fast = head;
        ListNode slow = head;
        
        // Move the fast pointer n steps ahead
        for (int i = 1; i <= n; i++) {
            fast = fast.next;
        }

        // If fast is null after moving n steps, it means we need to remove the head node
        if (fast == null) {
            return head.next; // Remove the first node (head)
        }
        
        // Move both pointers until fast reaches the end of the singly linked list
        while (fast.next != null) {
            fast = fast.next;
            slow = slow.next;
        }
        
        // Remove the nth node from the end
        slow.next = slow.next.next;
        
        return head; // Return the modified singly linked list
    }
}
