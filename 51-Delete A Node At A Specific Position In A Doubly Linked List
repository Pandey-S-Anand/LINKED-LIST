class Solution {
    public Node deleteNode(Node head, int position) {
        Node currentNode = head;

        // Step 1: Traverse to the node at the given position  We stop at the node to be deleted
        while (position > 1) {
            currentNode = currentNode.next;
            position--;
        }

        // Get the previous and next nodes of the node to be deleted
        Node nextNode = currentNode.next;
        Node prevNode = currentNode.prev;

        // Case 1: Deleting the head node (position == 1)
        if (prevNode == null) {
            // Update the head to next node
            head = nextNode;
            
            // If there's a node after head, update its prev to null (this check is safe even though the list size is guaranteed to be >= 2)
            if (nextNode != null) {
                nextNode.prev = null;
            }
        }else if (nextNode == null) {
            // Simply remove the last node by updating the second last node's next to null
            prevNode.next = null;
        } else {  // Case 3: Deleting a middle node
            prevNode.next = nextNode;     // Link previous node to next node
            nextNode.prev = prevNode;     // Link next node to previous node
        }

        return head;
    }
}
