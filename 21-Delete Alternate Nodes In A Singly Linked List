class Solution {
    //Deletes alternate nodes from a singly linked list starting from the second node.
    public void deleteAlt(Node head) {
        Node prevNode = head;          // Points to the node before the one we may delete
        Node currentNode = head.next;  // Starts from the second node (to be deleted)

        // Flag to indicate whether the current node should be deleted
        boolean toDelete = true;

        // Traverse the list while currentNode is not null
        while (currentNode != null) {
            if (toDelete) {
                // Skip the current node by updating the previous node's next pointer
                Node nextNode = currentNode.next;
                prevNode.next = nextNode;

                // Disconnect current node from the list to help GC
                currentNode.next = null;

                // Move current to the next node
                currentNode = nextNode;
            } else {
                // Move both pointers forward
                prevNode = currentNode;
                currentNode = currentNode.next;
            }

            // Toggle the delete flag for the next node
            toDelete = !toDelete;
        }
    }
}
