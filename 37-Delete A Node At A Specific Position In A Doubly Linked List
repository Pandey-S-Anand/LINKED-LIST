class Solution {
    public Node deleteNode(Node head, int position) {
        Node currentNode = head;

        // Traverse the list to reach the node at the given position (1-based index).
        while (position > 1) {
            currentNode = currentNode.next;
            position--;
        }

        // Case 1: If the node to be deleted is the only node in the list.
        if (currentNode.prev == null && currentNode.next == null) {
            return null; // Return null as the doubly linked list becomes empty.
        } else if (currentNode.prev == null) { // Case 2: If the node to be deleted is the head node.
            head = currentNode.next; // Update the head to the next node.
            currentNode.next.prev = null; // Remove the backward link from the next node.
        } else if (currentNode.next == null) { // Case 3: If the node to be deleted is the tail node.
            currentNode.prev.next = null; // Remove the forward link from the previous node.
        } else { // Case 4: If the node to be deleted is in the middle of the list.
            currentNode.prev.next = currentNode.next; // Connect the previous node to the next node.
            currentNode.next.prev = currentNode.prev; // Connect the next node to the previous node.
        }

        // Return the updated head of the doubly linked list.
        return head;
    }
}
