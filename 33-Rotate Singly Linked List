/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Bruteforce approach
 
class Solution {

    // Main function to rotate the linked list to the right by k places
    public ListNode rotateRight(ListNode head, int k) {
        // Step 1: Get the size (length) of the linked list
        int size = getSize(head);

        /* Step 2 :
         * Adjust k to ensure it is within the bounds of the singly linked list size.
         * This step is crucial because rotating the list by a number larger than its size
         * results in repetitive rotations. By taking k modulo the list size, we ensure
         * that the effective number of rotations is within the range [0, size - 1],
         * eliminating unnecessary full rotations and optimizing the solution.
         */
        k = k % size;

        // Step 3: Perform rotation k times (one node at a time)
        while (k-- > 0) {
            head = rightRotateBy1(head);
        }

        return head;
    }

    private int getSize(ListNode head) {
        ListNode current = head;
        int size = 0;

        while (current != null) {
            size++;
            current = current.next;
        }

        return size;
    }

    private ListNode rightRotateBy1(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        // Traverse to the last node
        while (currentNode.next != null) {
            prevNode = currentNode;
            currentNode = currentNode.next;
        }

        // At this point, currentNode is the last node and prevNode is the second last node
        prevNode.next = null; // Set second last node's next to null (new tail)
        // Move the last node to the front
        currentNode.next = head; // Link last node to head
        head = currentNode; // Make it the new head

        return head;
    }
}


//Optimal Approach

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        // Base cases: empty list or single node or no rotation
        if (head == null || head.next == null || k == 0) {
            return head;
        }

        // Step 1: Get the size and the last (tail) node of the linked list
        Object[] result = getSizeAndTail(head);
        int size = (int) result[0];
        ListNode tail = (ListNode) result[1];

        // Step 2: Normalize k (no need to rotate more than the length of the list)
        k = k % size;
        if (k == 0) {
            return head; // Already in correct position
        }

        // Step 3: Make the list circular
        tail.next = head;

        // Step 4: Find the new tail node, which is the (size - k)th node from the beginning (1-based index)
        int stepsToNewTail = size - k;
        ListNode newTail = head;
        while (stepsToNewTail > 1) {
            newTail = newTail.next;
            stepsToNewTail--;
        }

        // Step 5: The new head is the node after the new tail
        ListNode newHead = newTail.next;

        // Step 6: Break the circular connection
        newTail.next = null;

        return newHead;
    }

    private Object[] getSizeAndTail(ListNode head) {
        int size = 1;
        ListNode current = head;

        // Traverse the list to find the tail and calculate size
        while (current.next != null) {
            current = current.next;
            size++;
        }

        // current now points to the tail node
        return new Object[] { size, current };
    }
}
