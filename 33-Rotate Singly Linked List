/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Bruteforce approach
 
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        // Handle edge cases: Empty or single element singly linked list
        if (head == null || head.next == null) {
            return head;
        }

        // Get the size of the singly linked list
        int size = getSize(head);

        /*
         * Adjust k to ensure it is within the bounds of the singly linked list size.
         * This step is crucial because rotating the list by a number larger than its size
         * results in repetitive rotations. By taking k modulo the list size, we ensure
         * that the effective number of rotations is within the range [0, size - 1],
         * eliminating unnecessary full rotations and optimizing the solution.
         */
        k = k % size;

        // Perform the rotation by 1 k times
        for (int count = 1; count <= k; count++) {
            // Perform right rotation by 1 position on the singly linked list and get the new head
            head = rightRotateBy1(head);
        }

        return head;
    }

    private ListNode rightRotateBy1(ListNode head) {
        ListNode prevNode = null;
        ListNode currentNode = head;

        // Traverse to the last node of the singly linked list
        while (currentNode.next != null) {
            prevNode = currentNode;
            currentNode = currentNode.next;
        }

        /*
         * At the end of the loop:
         * - `currentNode` points to the last node of the singly linked list
         * - `prevNode` points to the second-to-last node of the singly linked list
         */
        prevNode.next = null; // Now the second-to-last node becomes the tail, so its next pointer is set to null
        currentNode.next = head; // Move the last node to the front of the list
        head = currentNode; // Update head to point to the new first node (formerly the last node)

        return head; // Return the updated head
    }

    private int getSize(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        int size = 0;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            size += 2;
        }

        if (fast != null) {
            size++;
        }

        return size;
    }
}



//Optimal Approach

class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        // Handle edge cases: if the list is empty or contains only one element
        if (head == null || head.next == null) {
            return head; // No rotation needed
        }

        // Get the size and tail node of the singly linked list
        Object[] sizeAndTail = getSizeAndTail(head);
        int size = (int) sizeAndTail[0];
        ListNode tail = (ListNode) sizeAndTail[1];

        /*
         * Adjust k to be within the bounds of the singly linked list size
         * If k is greater than the size of the singly linked list, rotating by k is equivalent to rotating by k % size
         */
        k = k % size;

        // If k is 0, no rotation is needed
        if (k == 0) {
            return head;
        }

        // Make the singly linked list circular by connecting the tail's next to the head
        tail.next = head;

        // Find the new tail, which will be at the (size - k)th position in the singly linked list
        ListNode newTail = head;
        // Traverse the circular singly linked list to find the new tail node
        for (int i = 1; i < size - k; i++) {
            newTail = newTail.next;
        }

        // The new head will be the node right after the new tail
        ListNode newHead = newTail.next;

        // Break the circular connection to restore the singly linked list
        newTail.next = null;

        // Return the new head of the rotated singly linked list
        return newHead;
    }

    private Object[] getSizeAndTail(ListNode head) {
        ListNode fast = head; // Pointer to traverse the singly linked list at double the speed
        ListNode fastPrev = null; // To keep track of the node before the 'fast' pointer (the tail in the case of an even-sized list)
        int size = 0; // Variable to track the total size of the singly linked list

        // Traverse the list to calculate its size and find the tail node
        while (fast != null && fast.next != null) {
            fastPrev = fast.next; // Store the node before 'fast' (which will eventually be the tail in even-sized lists)
            fast = fast.next.next; // Move the 'fast' pointer two steps at a time
            size += 2; // Increase the size by 2 since the 'fast' pointer is moving two steps
        }

        // If 'fast' is not null, it means the list has an odd number of nodes
        if (fast != null) {
            size++; // Account for the last remaining node
            return new Object[] { size, fast }; // Return the size and the tail node (which is 'fast' in odd-sized singly linked lists)
        }

        // If 'fast' is null, it indicates that the list has an even number of nodes
        return new Object[] { size, fastPrev }; // Return the size and the tail node (stored in 'fastPrev')
    }
}
