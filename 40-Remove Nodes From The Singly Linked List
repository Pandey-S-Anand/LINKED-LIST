/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */


//Bruteforce approach
 
class Solution {
    //Helper class to maintain head and tail of a newly constructed list.
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        public void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode removeNodes(ListNode head) {
        ListNode currentNode = head;
        NodePair filteredList = new NodePair();

        // Traverse the list and append only those nodes that don't have a greater node to the right
        while (currentNode != null) {
            if (!hasGreaterOnRight(currentNode)) {
                filteredList.append(currentNode);
            }
            currentNode = currentNode.next;
        }

        filteredList.tail.next = null;

        return filteredList.head;
    }

    private boolean hasGreaterOnRight(ListNode node) {
        ListNode currentNode = node.next;

        // Scan the rest of the list to check for a larger value
        while (currentNode != null) {
            if (currentNode.val > node.val) {
                return true;
            }
            currentNode = currentNode.next;
        }

        return false;
    }
}


//Better approach

class Solution {
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        public void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode removeNodes(ListNode head) {
        NodePair filteredList = new NodePair();

        /**
         * After reversing the singly linked list, the problem transforms into:
         * 
         * "Remove nodes if any node on the left is greater than the current node."
         * 
         * Explanation:
         * 1. The right side of each node in the original singly linked list becomes the
         * left side in the reversed singly linked list.
         * 2. Instead of checking for greater values on the right, we now check for
         * greater values on the left.
         * 3. We keep track of the maximum value encountered so far (maxSoFar) while
         * traversing from left to right.
         * 4. If a node's value is less than maxSoFar, we remove it by skipping the node.
         * 5. Finally, we reverse the singly linked list again to restore the original order.
         */
        ListNode newHead = reverse(head);
        ListNode currentNode = newHead;
        int maxSoFar = Integer.MIN_VALUE;

        // Traverse the reversed list and build the filtered result
        while (currentNode != null) {
            if (currentNode.val >= maxSoFar) {
                filteredList.append(currentNode);
                maxSoFar = currentNode.val;
            }
            currentNode = currentNode.next;
        }

        // Disconnects any leftover links from the original list to avoid unintended references
        filteredList.tail.next = null;

        // Final reversal to restore original order
        return reverse(filteredList.head);
    }

    private ListNode reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        return prevNode;
    }
}


//Optimal approach

class Solution {
    private static class NodePair {
        private ListNode head;

        public void insertAtFront(ListNode node) {
            if (head == null) {
                head = node;
            } else {
                node.next = head;
                head = node;
            }
        }
    }

    public ListNode removeNodes(ListNode head) {
        NodePair filteredList = new NodePair();
        ListNode newHead = reverse(head); // Step 1: Reverse the list
        ListNode currentNode = newHead;
        int maxSoFar = Integer.MIN_VALUE;

        // Step 2 & 3: Traverse reversed list, keep nodes with values >= maxSoFar
        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            if (currentNode.val >= maxSoFar) {
                // Step 4: Disconnect current node from original next to avoid dangling links
                currentNode.next = null;
                filteredList.insertAtFront(currentNode); // Insert at front to preserve original order
                maxSoFar = currentNode.val;
            }
            currentNode = nextNode;
        }

        // Step 5: Since nodes are inserted at the front, the resulting list is correctly ordered without needing another reversal.
        return filteredList.head;
    }

    private ListNode reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        return prevNode;
    }
}
