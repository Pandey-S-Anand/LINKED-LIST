/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Bruteforce approach

class Solution {
    public ListNode oddEvenList(ListNode head) {
        // Base case: If the list is empty, no rearrangement is needed
        if (head == null) {
            return head;
        }

        // Lists to store the values of odd-indexed and even-indexed nodes
        List<Integer> oddNodeValues = new ArrayList<>();
        List<Integer> evenNodeValues = new ArrayList<>();
        ListNode currentNode = head;
        boolean isOddIndex = true;

        // Traverse the linked list and separate node values into odd and even indexed lists
        while (currentNode != null) {
            if (isOddIndex) {
                oddNodeValues.add(currentNode.val); // Add to odd-indexed list
            } else {
                evenNodeValues.add(currentNode.val); // Add to even-indexed list
            }

            isOddIndex = !isOddIndex; // Alternate between odd and even indexes
            currentNode = currentNode.next; // Move to the next node
        }

        // Reassign the values back to the linked list
        currentNode = head;

        // Assign values from the odd-indexed list
        for (int oddNodeValue : oddNodeValues) {
            currentNode.val = oddNodeValue;
            currentNode = currentNode.next;
        }

        // Assign values from the even-indexed list
        for (int evenNodeValue : evenNodeValues) {
            currentNode.val = evenNodeValue;
            currentNode = currentNode.next;
        }

        return head;
    }
}


//Better Approach
 
class Solution {
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        NodePair() {
            head = tail = null;
        }

        private void append(ListNode node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode oddEvenList(ListNode head) {
        // Base case: If the list is empty or contains only one node, return as-is
        if (head == null || head.next == null) {
            return head;
        }
        
        // Two separate lists for odd-indexed and even-indexed nodes
        NodePair oddList = new NodePair();
        NodePair evenList = new NodePair();

        ListNode currentNode = head; // Pointer to traverse the original list
        boolean isOddIndex = true; // Tracks whether current position is odd

        while (currentNode != null) {
            // Append the current node to either the odd or even list
            if (isOddIndex) {
                oddList.append(currentNode);
            } else {
                evenList.append(currentNode);
            }

            isOddIndex = !isOddIndex; // Flip the flag for the next node
            currentNode = currentNode.next;
        }

        /*
        * Ensure both odd and even lists are properly terminated.
        * This step is essential to avoid cycles caused by
        * leftover 'next' pointers from the original list.
        */
        oddList.tail.next = null;
        evenList.tail.next = null;

        // After segregation, link the last node of the odd list to the head of the even list
        oddList.tail.next = evenList.head;

        // Return the modified list starting with the odd-indexed nodes
        return oddList.head;
    }
}



//Optimal Approach

class Solution {
    public ListNode oddEvenList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }

        ListNode currentOddNode = head; // Pointer to traverse nodes in odd-indexed positions
        ListNode currentEvenNode = head.next; // Pointer to traverse nodes in even-indexed positions
        ListNode evenHead = currentEvenNode; // Store the head of the even-indexed list to attach later

        /*
         * The condition `currentEvenNode != null && currentEvenNode.next != null` is crucial:
         * 
         * 1. `currentEvenNode.next != null`:
         *    - This is necessary because when the list has an even length, 
         *      the last node will be an even-indexed node, and its `next` will be null. 
         *      Without this check, trying to access `currentEvenNode.next` would result 
         *      in a NullPointerException.
         *      Example: 1 -> 2 -> 3 -> 4
         * 
         * 2. `currentEvenNode != null`:
         *    - This is important for lists with an odd length, where the last node is 
         *      an odd-indexed node. In such cases, `currentEvenNode` will become null 
         *      during traversal, and accessing `currentEvenNode.next` without this check 
         *      would also cause a NullPointerException.
         *      Example: 1 -> 2 -> 3 -> 4 -> 5
         */
        // Rearrange the nodes into odd and even groups
        while (currentEvenNode != null && currentEvenNode.next != null) {
            // Link the current odd node to the next odd-indexed node
            currentOddNode.next = currentEvenNode.next;
            currentOddNode = currentOddNode.next; // Move the odd pointer forward

            // Link the current even node to the next even-indexed node
            currentEvenNode.next = currentOddNode.next;
            currentEvenNode = currentEvenNode.next; // Move the even pointer forward
        }

        // Connect the end of the odd-indexed list to the head of the even-indexed list
        currentOddNode.next = evenHead;

        // Return the modified list starting from the original head
        return head;
    }
}
