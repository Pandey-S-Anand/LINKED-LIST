//Bruteforce Approach

class Solution {
    public int getCount(Node head) {
        int length = 0;
        Node currentNode = head;

        while (currentNode != null) {
            currentNode = currentNode.next;
            length++;
        }

        return length;
    }
}

//Optimal Approach

class Solution {
    public int getCount(Node head) {
        int size = 0; // Variable to store the size of the singly linked list
        Node fast = head;

        // Traverse the singly linked list using a fast pointer
        while (fast != null && fast.next != null) {
            fast = fast.next.next; // Move the fast pointer two steps at a time
            size += 2; // Increment size by 2 as we are effectively counting two nodes in each iteration
        }

        // Check if the fast pointer is pointing to the last node (odd length singly linked list)
        if (fast != null) {
            size++; // Increment size by 1 for the last node
        }

        // Return the total size of the singly linked list
        return size;
    }
}
