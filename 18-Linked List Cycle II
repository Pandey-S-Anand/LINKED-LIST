//Bruteforce approach

public class Solution {
    public ListNode detectCycle(ListNode head) {
        // Set to store visited nodes
        Set<ListNode> seenNodes = new HashSet<>();

        ListNode currentNode = head;

        while (currentNode != null) {
            // If the current node has been visited before, it means we have a cycle
            if (seenNodes.contains(currentNode)) {
                return currentNode; // Return the node where the cycle starts
            }
            // Mark the current node as visited
            seenNodes.add(currentNode);
            currentNode = currentNode.next;
        }

        // If no cycle is found, return null
        return null;
    }
}


//Optimal approach

public class Solution {
    public ListNode detectCycle(ListNode head) {
        // Step 1: Check for the existence of a cycle and find the meeting point if a cycle is detected
        ListNode meetingPoint = getMeetingPoint(head);

        if (meetingPoint == null) {
            return null; // No cycle found
        }

        // Step 2: Find the start of the cycle
        return getCycleStart(head, meetingPoint);
    }

    private ListNode getMeetingPoint(ListNode head) {
        ListNode slow = head, fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            if (slow == fast) {
                return slow; // Meeting point
            }
        }

        return null; // No cycle detected
    }

    private ListNode getCycleStart(ListNode head, ListNode meetingPoint) {
        ListNode pointer1 = head;
        ListNode pointer2 = meetingPoint;

        while (pointer1 != pointer2) {
            pointer1 = pointer1.next;
            pointer2 = pointer2.next;
        }

        return pointer1; // Start of the cycle
    }
}

/**
 * The `getCycleStart` method works because of the following reasoning:
 *
 * Structure of a linked list with a cycle:
 * - L: Distance from the head to the start of the cycle.
 * - C: Total length of the cycle.
 * - X: Distance from the start of the cycle to the meeting point.
 *
 * Step 1: Detecting the cycle
 * - Two pointers, `slow` and `fast`, traverse the list.
 *   - `slow` moves one step at a time.
 *   - `fast` moves two steps at a time.
 * - If a cycle exists, `slow` and `fast` will eventually meet at a point inside the cycle.
 *
 * Step 2: Key Distance Relationship
 * - When the pointers meet at the meeting point (M), the distances traveled are:
 *   - `slow`: L + X
 *   - `fast`: L + X + k * C (where k is the number of full loops by `fast`).
 * - Since `fast` moves twice as fast as `slow`:
 *   2(L + X) = L + X + k * C
 *   => L + X = k * C
 * - This implies that the distance from the head to the start of the cycle (L)
 *   is equal to the distance from the meeting point to the start of the cycle (C - X).
 *
 * Step 3: Resetting and Moving Pointers
 * - One pointer (`slow`) is reset to the head.
 * - The other pointer (`fast`) remains at the meeting point (M).
 * - Both pointers move one step at a time.
 * - After L steps from the head and (C - X) steps from the meeting point,
 *   both pointers will meet at the start of the cycle.
 *
 * This ensures that the algorithm correctly identifies the start of the cycle.
 */
