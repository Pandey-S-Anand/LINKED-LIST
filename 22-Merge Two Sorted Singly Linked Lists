/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Method 1 (Using extra space)

class Solution {
    // Pointer to the head of the merged list
    private ListNode mergedHead = null;
    // Pointer to the tail of the merged list for efficient appends
    private ListNode mergedTail = null;

    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        // Initialize pointers to traverse both input lists
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Traverse both lists until one is exhausted
        while (currentNode1 != null && currentNode2 != null) {
            // Compare current values from both lists
            if (currentNode1.val <= currentNode2.val) {
                // Append the smaller (or equal) value
                append(currentNode1.val);
                // Move pointer in list1 forward
                currentNode1 = currentNode1.next;
            } else {
                append(currentNode2.val);
                // Move pointer in list2 forward
                currentNode2 = currentNode2.next;
            }
        }

        // If any nodes remain in list1, append them all
        while (currentNode1 != null) {
            append(currentNode1.val);
            currentNode1 = currentNode1.next;
        }

        // If any nodes remain in list2, append them all
        while (currentNode2 != null) {
            append(currentNode2.val);
            currentNode2 = currentNode2.next;
        }

        // Return the head of the newly merged list
        return mergedHead;
    }

    private void append(int data) {
        // Create a new node for the merged list
        ListNode newNode = new ListNode(data);

        if (mergedHead == null) {
            // First node in the merged list
            mergedHead = newNode;
            mergedTail = newNode;
        } else {
            // Link the new node to the end and update the tail
            mergedTail.next = newNode;
            mergedTail = newNode;
        }
    }
}


//Method 2 (Without extra space)

class Solution {
    // Head of the merged linked list
    private ListNode mergedHead = null;
    // Tail pointer to keep track of the last node in the merged list for efficient appending
    private ListNode mergedTail = null;

    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        // Initialize pointers to traverse the input lists
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Traverse both lists while neither is exhausted
        while (currentNode1 != null && currentNode2 != null) {
            // Compare current node values of both lists
            if (currentNode1.val <= currentNode2.val) {
                // Append the node from list1 to the merged list
                append(currentNode1);
                currentNode1 = currentNode1.next;
            } else {
                // Append the node from list2 to the merged list
                append(currentNode2);
                currentNode2 = currentNode2.next;
            }
        }

        // Append remaining nodes from list1, if any
        if (currentNode1 != null) {
            append(currentNode1);
        }

        // Append remaining nodes from list2, if any
        if (currentNode2 != null) {
            append(currentNode2);
        }

        // Return the head of the merged linked list
        return mergedHead;
    }

    private void append(ListNode node) {
        if (mergedHead == null) {
            // If merged list is empty, initialize head and tail with the new node
            mergedHead = mergedTail = node;
        } else {
            // Link the current tail to the new node
            mergedTail.next = node;
            // Move the tail pointer forward to the newly added node
            mergedTail = mergedTail.next;
        }
    }
}
