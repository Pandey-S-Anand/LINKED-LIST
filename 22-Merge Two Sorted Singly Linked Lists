/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Method 1 (Using extra space)

//Naive Implementation 

class Solution {
    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        MySinglyLinkedList mergedSinglyLinkedList = new MySinglyLinkedList();
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        while (currentNode1 != null && currentNode2 != null) {
            // Retrieve the values of the current nodes from both the singly linked lists
            int val1 = currentNode1.val;
            int val2 = currentNode2.val;
            // Append the smaller value to the merged singly linked list
            if (val1 <= val2) {
                mergedSinglyLinkedList.append(val1);
                currentNode1 = currentNode1.next; // Move pointer of the first singly linked list forward
            } else {
                mergedSinglyLinkedList.append(val2);
                currentNode2 = currentNode2.next; // Move pointer of the second singly linked list forward
            }
        }

        // If there are remaining nodes in the first singly linked list, append them all
        while (currentNode1 != null) {
            mergedSinglyLinkedList.append(currentNode1.val);
            currentNode1 = currentNode1.next;
        }

        // If there are remaining nodes in the second singly linked list, append them all
        while (currentNode2 != null) {
            mergedSinglyLinkedList.append(currentNode2.val);
            currentNode2 = currentNode2.next;
        }

        // Return the head of the merged singly linked list
        return mergedSinglyLinkedList.getHead();
    }
}

class MySinglyLinkedList {
    private ListNode head;
    private ListNode tail;

    public ListNode getHead() {
        return this.head;
    }

    public void append(int data) {
        ListNode newNode = new ListNode(data);

        if (head == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }
}


//Optimal Implementation 

class Solution {
    private ListNode mergedHead = null;
    private ListNode mergedTail = null;

    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        while (currentNode1 != null && currentNode2 != null) {
            int val1 = currentNode1.val;
            int val2 = currentNode2.val;

            if (val1 <= val2) {
                append(val1);
                currentNode1 = currentNode1.next;
            } else {
                append(val2);
                currentNode2 = currentNode2.next;
            }
        }

        while (currentNode1 != null) {
            append(currentNode1.val);
            currentNode1 = currentNode1.next;
        }

        while (currentNode2 != null) {
            append(currentNode2.val);
            currentNode2 = currentNode2.next;
        }

        return mergedHead;
    }

    private void append(int data) {
        ListNode newNode = new ListNode(data);

        if (mergedHead == null) {
            mergedHead = mergedTail = newNode;
        } else {
            mergedTail.next = newNode;
            mergedTail = newNode;
        }
    }
}


//Method 2 (Without extra space)

//Naive Implementation

class Solution {
    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;
        ListNode mergedHead = null; // Head of the merged singly linked list
        ListNode mergedTail = null; // Tail of the merged singly linked list

        while (currentNode1 != null && currentNode2 != null) {
            int val1 = currentNode1.val;
            int val2 = currentNode2.val;

            if (val1 <= val2) {
                if (mergedHead == null) {
                    // Initialize merged singly linked list with the first node
                    mergedHead = mergedTail = currentNode1;
                } else {
                    // Append currentNode1 to the merged singly linked list and update the tail
                    mergedTail.next = currentNode1;
                    mergedTail = mergedTail.next;
                }
                currentNode1 = currentNode1.next; // Move to the next node in the first singly linked list
            } else {
                if (mergedHead == null) {
                    // Initialize merged singly linked list with the first node
                    mergedHead = mergedTail = currentNode2;
                } else {
                    // Append currentNode2 to merged singly linked list and update tail
                    mergedTail.next = currentNode2;
                    mergedTail = mergedTail.next;
                }
                currentNode2 = currentNode2.next; // Move to the next node in the second singly linked list
            }
        }

        // Append any remaining nodes from the first singly linked list
        while (currentNode1 != null) {
            if (mergedHead == null) {
                // Initialize merged singly linked list if it's still empty; this happens when the second singly linked list in the input is null or empty
                mergedHead = mergedTail = currentNode1;
            } else {
                // Append remaining nodes of the second singly linked list to the merged singly linked list
                mergedTail.next = currentNode1;
                mergedTail = mergedTail.next;
            }
            currentNode1 = currentNode1.next; // Move to the next node in the first singly linked list
        }

        while (currentNode2 != null) {
            if (mergedHead == null) {
                // Initialize merged singly linked list if it's still empty; this happens when the first singly linked list in the input is null or empty
                mergedHead = mergedTail = currentNode2;
            } else {
                // Append remaining nodes of the first singly linked list to the merged singly linked list
                mergedTail.next = currentNode2;
                mergedTail = mergedTail.next;
            }
            currentNode2 = currentNode2.next; // Move to the next node in the second singly linked list
        }

        return mergedHead; // Return the head of the merged singly linked list
    }
}


//Optimal Implementation

class Solution {
    private ListNode mergedHead = null;
    private ListNode mergedTail = null;

    public ListNode mergeTwoLists(ListNode head1, ListNode head2) {
        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        while (currentNode1 != null && currentNode2 != null) {
            int val1 = currentNode1.val;
            int val2 = currentNode2.val;

            if (val1 <= val2) {
                append(currentNode1);
                currentNode1 = currentNode1.next;
            } else {
                append(currentNode2);
                currentNode2 = currentNode2.next;
            }
        }

        if (currentNode1 != null) {
            append(currentNode1);
            currentNode1 = currentNode1.next;
        }

        if (currentNode2 != null) {
            append(currentNode2);
            currentNode2 = currentNode2.next;
        }

        return mergedHead;
    }

    private void append(ListNode node) {
        if (mergedHead == null) {
            mergedHead = mergedTail = node;
        } else {
            mergedTail.next = node;
            mergedTail = mergedTail.next;
        }
    }
}
