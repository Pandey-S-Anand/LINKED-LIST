/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    // Helper class to manage both head and tail pointers of a newly built list
    private static class NodePair {
        private ListNode head;
        private ListNode tail;

        // Append a node to the end of the list maintained by this NodePair
        private void append(ListNode node) {
            if (head == null) {
                // If list is empty, initialize both head and tail to the node
                head = tail = node;
            } else {
                // Attach new node at the end and move tail pointer forward
                tail.next = node;
                tail = node;
            }
        }
    }

    public ListNode modifiedList(int[] arr, ListNode head) {
        NodePair list = new NodePair(); // This will store the filtered result list

        // Convert array to Set for O(1) lookup time for each element
        Set<Integer> set = Arrays.stream(arr).boxed().collect(Collectors.toSet());

        ListNode currentNode = head;

        // Traverse original list
        while (currentNode != null) {
            // If current node's value is NOT in the set, append it to result list
            if (!set.contains(currentNode.val)) {
                list.append(currentNode);
            }
            currentNode = currentNode.next; // Move to next node
        }

        // Important: If any nodes were added, cut off any leftover links
        if (list.tail != null) {
            list.tail.next = null;
        }

        // Return head of the filtered list, or null if all nodes were removed
        return list.head;
    }
}
