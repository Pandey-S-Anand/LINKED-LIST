/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

//Bruteforce approach

class Solution {

    // Helper class to build a singly linked list using the 'next' pointer
    private class RandomSinglyLinkedList {
        private Node head;
        private Node tail;

        // Appends a node with given value and returns the newly created node
        public Node append(int num) {
            Node node = new Node(num);
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
            return node;
        }
    }

    public Node copyRandomList(Node head) {
        // Step 1: Initialize a helper list for cloned nodes
        RandomSinglyLinkedList clonedList = new RandomSinglyLinkedList();

        // Step 2: Map to track original node ➝ cloned node
        Map<Node, Node> map = new HashMap<>();

        // First pass: Clone the list using next pointers and populate the map
        Node currentNode = head;
        while (currentNode != null) {
            Node cloneNode = clonedList.append(currentNode.val); // Clone node with same value
            map.put(currentNode, cloneNode); // Map original → clone
            currentNode = currentNode.next;
        }

        // Assign correct random pointers to cloned nodes using the map
        currentNode = head;
        while (currentNode != null) {
            Node clonedNode = map.get(currentNode); // Cloned version of current node
            Node randomNode = map.get(currentNode.random); // Cloned version of random target
            clonedNode.random = randomNode; // Set the cloned node's random pointer
            currentNode = currentNode.next;
        }

        // Return head of the cloned linked list
        return clonedList.head;
    }
}



//Optimal Approach

class Solution {
    /**
     * Helper class to build a singly linked list using the 'next' pointer.
     * Used to separate and construct the copied list from interleaved structure.
     */
    private class RandomSinglyLinkedList {
        private Node head;
        private Node tail;

        // Appends the given node to the linked list.
        public void append(Node node) {
            if (head == null) {
                head = tail = node;
            } else {
                tail.next = node;
                tail = node;
            }
            return node;
        }
    }

    public Node copyRandomList(Node head) {
        if (head == null) {
            return head;
        }

        // Step 1: Interleave original and copied nodes
        interleaveOriginalAndCopiedNodes(head);

        // Step 2: Assign random pointers to the copied nodes
        populateCopiedNodesRandomPointer(head);

        // Step 3: Separate the copied nodes to form the final deep copy
        return segregateCopiedNodes(head);
    }

    /**
     * Creates a copy of each node and inserts it right next to the original node.
     * Example: A → B → C becomes A → A' → B → B' → C → C'
     */
    private void interleaveOriginalAndCopiedNodes(Node head) {
        Node currentNode = head;
        while (currentNode != null) {
            Node copiedNode = new Node(currentNode.val);   // Create copy node
            Node nextNode = currentNode.next;              // Store next pointer
            currentNode.next = copiedNode;                 // Link original → copy
            copiedNode.next = nextNode;                    // Link copy → next original
            currentNode = nextNode;                        // Move to next original node
        }
    }

    /**
     * Assigns random pointers for the copied nodes.
     * Since each copied node is placed immediately after its original counterpart,
     * we can set the copied node's random pointer using: copiedNode.random = originalNode.random.next.
     */
    private void populateCopiedNodesRandomPointer(Node head) {
        Node currentNode = head;
        while (currentNode != null) {
            Node originalRandomNode = currentNode.random;
            Node copiedNode = currentNode.next;
            if (originalRandomNode == null) {
                copiedNode.random = null;
            } else {
                copiedNode.random = originalRandomNode.next;
            }
            currentNode = copiedNode.next; // Move to next original node
        }
    }

    // Separates the interleaved original and copied nodes.
    private Node segregateCopiedNodes(Node head) {
        Node currentNode = head;
        RandomSinglyLinkedList list = new RandomSinglyLinkedList();

        while (currentNode != null) {
            Node copiedNode = currentNode.next;            // Get the copied node
            currentNode.next = copiedNode.next;            // Restore the original next link
            list.append(copiedNode);                       // Add copied node to new list
            Node nextOriginal = copiedNode.next;           // Move to next original
            copiedNode.next = null;                        // Clean up next pointer of copied node
            currentNode = nextOriginal;                    // Move forward in original list
        }

        return list.head; // Return the head of the copied list
    }
}
