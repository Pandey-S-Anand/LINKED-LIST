class Solution {
    // Helper class to build the resulting linked list without duplicates
    private static class NodeBuilder {
        private Node head; // Head of the newly built list
        private Node tail; // Tail to append new unique nodes efficiently

        // Appends a node to the end of the list
        private void append(Node node) {
            if (head == null) {
                // First node being added to the list
                head = tail = node;
            } else {
                // Link the current tail to the new node
                tail.next = node;
                node.prev = tail; // Set previous pointer for doubly linked list
                tail = node; // Update the tail to the new node
            }
        }
    }

    // Removes duplicate nodes from a sorted doubly linked list
    Node removeDuplicates(Node head) {
        // Edge case: if list contains only one node, return as is
        if (head.next == null) {
            return head;
        }

        NodeBuilder list = new NodeBuilder();

        // Always add the first node (assumed unique initially)
        list.append(lastUniqueNode);

        // Start checking from the second node
        Node currentNode = head.next;

        while (currentNode != null) {
            // If current node contains a different value than the last unique node
            if (list.tail.data != currentNode.data) {
                list.append(currentNode); // Append it to result list
            }

            // Move to the next node in the original list
            currentNode = currentNode.next;
        }

        // Ensure the new list ends correctly and doesnâ€™t point to any duplicate node
        list.tail.next = null;

        return list.head; // Return the head of the deduplicated list
    }
}
