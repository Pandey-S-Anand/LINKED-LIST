//Optimal Approach

class Solution {
    public DLLNode reverseDLL(DLLNode head) {
        DLLNode tail = getTail(head); // Get the last node (tail) using fast pointer approach
        DLLNode start = head;
        DLLNode end = tail;

        /*
         * Swap the data between corresponding nodes from the front (start)
         * and back (end) until they meet or cross each other.
         * 
         * For odd-sized lists: loop ends when start == end
         * For even-sized lists: loop ends when start.prev == end
         */
        while (start != end && start.prev != end) {
            // Swap data values
            swap(start, end);
            // Move pointers inward
            start = start.next;
            end = end.prev;
        }

        return head; // Return the list head
    }

    private DLLNode getTail(DLLNode head) {
        DLLNode fast = head;
        DLLNode fastPrev = null;

        /*
         * Use a fast pointer to traverse 2 nodes at a time and track its previous node.
         * - If the list has odd length, fast will end at the last node.
         * - If even, fast becomes null and fastPrev holds the last node.
         */
        while (fast != null && fast.next != null) {
            fastPrev = fast.next;
            fast = fast.next.next;
        }

        return (fast != null) ? fast : fastPrev;
    }
    
    private void swap(DLLNode start, DLLNode end){
        int temp = start.data;
        start.data = end.data;
        end.data = temp;  
    }
}
