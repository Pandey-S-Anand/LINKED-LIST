/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

class Solution {
    public ListNode swapPairs(ListNode head) {
        // If the list is empty or has only one node, no swap needed
        if (head == null || head.next == null) {
            return head;
        }

        // After the first swap, the second node will be the new head of the list
        ListNode newHead = head.next;

        // Pointer to the first node of the current pair to be swapped
        ListNode pairHead = head;

        // Keeps track of the tail node of the previously swapped pair for linking
        ListNode lastPairTail = null;

        // Iterate through the list in pairs
        while (pairHead != null && pairHead.next != null) {
            // The second node in the current pair
            ListNode pairTail = pairHead.next;

            // Save the start of the next pair before breaking the link
            ListNode nextPairHead = pairTail.next;

            // Break the link between the current pair and the next nodes, so that the reverse method only reverses this pair
            pairTail.next = null;

            // Reverse the current pair in place
            reverse(pairHead);

            // After reversal:
            // pairTail is now the head of the reversed pair (was the tail before)
            // pairHead is now the tail of the reversed pair (was the head before)

            // Link the previous pair's tail to the new head of this reversed pair
            if (lastPairTail != null) {
                lastPairTail.next = pairTail;
            }

            // Update lastPairTail to the current pair's tail for the next iteration
            lastPairTail = pairHead;

            // Move to the next pair to be processed
            pairHead = nextPairHead;
        }

        // If one node remains unpaired (when list has odd number of nodes), connect it directly to the tail of the last swapped pair
        if (pairHead != null) {
            lastPairTail.next = pairHead;
        }

        // Return the new head of the swapped list
        return newHead;
    }

    private void reverse(ListNode head) {
        ListNode currentNode = head;
        ListNode prevNode = null;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;  
            currentNode.next = prevNode;       
            prevNode = currentNode;           
            currentNode = nextNode;
        }
    }
}
