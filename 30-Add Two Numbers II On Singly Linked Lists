/**
 * Definition for singly-linked list.
 * public class ListNode {
 * int val;
 * ListNode next;
 * ListNode() {}
 * ListNode(int val) { this.val = val; }
 * ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */

//Bruteforce approach

/**
 * Example: Adding two numbers represented as singly linked lists
 * 
 * Input:
 * l1: 7 -> 2 -> 4 -> 3 (represents the number 7243)
 * l2: 5 -> 6 -> 4     (represents the number 564)
 * 
 * Process:
 * 1. Reverse both singly linked lists.
 *    Reverse l1: 3 -> 4 -> 2 -> 7
 *    Reverse l2: 4 -> 6 -> 5
 * 
 * 2. Add reversed numbers digit by digit using carry:
 *    - 3 + 4 + 0 = 7  (carry = 0) -> Insert 7 at the front of the result list
 *    - 4 + 6 + 0 = 10 (carry = 1) -> Insert 0 at the front of the result list
 *    - 2 + 5 + 1 = 8  (carry = 0) -> Insert 8 at the front of the result list
 *    - 7 + 0 + 0 = 7  (carry = 0) -> Insert 7 at the front of the result list
 * 
 * Result after addition (already in correct order due to front insertion):
 * 7 -> 8 -> 0 -> 7 (represents the number 7807)
 * 
 * Output:
 * The resultant singly linked list is 7 -> 8 -> 0 -> 7, representing the sum 7807.
 */
 
class Solution {
    // Helper class to build a singly linked list dynamically by inserting at the front.
    private static class SinglyLinkedList {
        private ListNode head;

        SinglyLinkedList() {
            head = null;
        }

        // Inserts a new node with the given value at the front of the list.
        public void insertAtFront(int num) {
            ListNode node = new ListNode(num);
            node.next = head;
            head = node;
        }
    }

    public ListNode addTwoNumbers(ListNode head1, ListNode head2) {
        head1 = reverse(head1);
        head2 = reverse(head2);
        return sumTwoNumbers(head1, head2);
    }

    private ListNode sumTwoNumbers(ListNode head1, ListNode head2) {
        SinglyLinkedList sum = new SinglyLinkedList();
        int base = 0, carry = 0;

        ListNode currentNode1 = head1;
        ListNode currentNode2 = head2;

        // Continue looping until all nodes are processed and carry is 0
        while (currentNode1 != null || currentNode2 != null || carry == 1) {
            // Fetch digits from current nodes, defaulting to 0 if node is null
            int digit1 = currentNode1 != null ? currentNode1.val : 0;
            int digit2 = currentNode2 != null ? currentNode2.val : 0;

            // Calculate sum and carry
            base = (digit1 + digit2 + carry) % 10;
            carry = (digit1 + digit2 + carry) / 10;

            // Append the computed digit to the result list
            sum.insertAtFront(base);

            // Move to next nodes if they exist
            currentNode1 = currentNode1 != null ? currentNode1.next : null;
            currentNode2 = currentNode2 != null ? currentNode2.next : null;
        }

        // Return the head of the newly formed linked list
        return sum.head;
    }

    private ListNode reverse(ListNode head) {
        ListNode prevNode = null;
        ListNode currentNode = head;

        while (currentNode != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }

        return prevNode;
    }
}


//Optimal approach

/*
 * This approach uses stacks to reverse the digits of both input singly linked lists.
 * By pushing digits onto the stacks, we simulate the reversal. Then, by popping digits 
 * from the stacks, we add them starting from the least significant digit.
 */

class Solution {
    private static class SinglyLinkedList {
        private ListNode head;

        SinglyLinkedList() {
            head = null;
        }

        public void insertAtFront(int num) {
            ListNode node = new ListNode(num);
            node.next = head;
            head = node;
        }
    }

    public ListNode addTwoNumbers(ListNode num1, ListNode num2) {
        Stack<Integer> num1Stack = new Stack<>(); // Stack to reverse num1
        Stack<Integer> num2Stack = new Stack<>(); // Stack to reverse num2

        // Push all digits from the first linked list to stack
        while (num1 != null) {
            num1Stack.push(num1.val);
            num1 = num1.next;
        }

        // Push all digits from the second linked list to stack
        while (num2 != null) {
            num2Stack.push(num2.val);
            num2 = num2.next;
        }

        int base = 0, carry = 0, digitSum = 0;
        SinglyLinkedList sum = new SinglyLinkedList();

        // Add digits from both stacks until all are processed and carry is 0
        while (!num1Stack.isEmpty() || !num2Stack.isEmpty() || carry == 1) {
            // Pop digit from stack or treat as 0 if empty
            int digit1 = num1Stack.isEmpty() ? 0 : num1Stack.pop();
            int digit2 = num2Stack.isEmpty() ? 0 : num2Stack.pop();

            // Compute sum of digits and carry
            digitSum = digit1 + digit2 + carry;
            base = digitSum % 10; // Current digit to store
            carry = digitSum / 10; // Carry for next iteration

            // Prepend the current digit to the result list
            sum.insertAtFront(base);
        }

        // Return the head of the result list (most significant digit first)
        return sum.head;
    }
}
